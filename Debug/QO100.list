
QO100.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001db8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001ec4  08001ec4  00011ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f10  08001f10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f10  08001f10  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f10  08001f10  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f10  08001f10  00011f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f14  08001f14  00011f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  2000000c  08001f24  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000dc  08001f24  000200dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008d38  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a01  00000000  00000000  00028d6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000978  00000000  00000000  0002a770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008c0  00000000  00000000  0002b0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a48  00000000  00000000  0002b9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aa92  00000000  00000000  000423f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008071e  00000000  00000000  0004ce82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cd5a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002494  00000000  00000000  000cd5f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001eac 	.word	0x08001eac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001eac 	.word	0x08001eac

0800014c <LCD_Delay_us>:
#define LCD_1LINE               0x00
#define LCD_5x10DOTS            0x04
#define LCD_5x8DOTS             0x00
//############################################################################################
void  LCD_Delay_us(uint16_t  us)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	80fb      	strh	r3, [r7, #6]
  uint32_t  Div = (SysTick->LOAD+1)/1000;
 8000156:	4b19      	ldr	r3, [pc, #100]	; (80001bc <LCD_Delay_us+0x70>)
 8000158:	685b      	ldr	r3, [r3, #4]
 800015a:	3301      	adds	r3, #1
 800015c:	4a18      	ldr	r2, [pc, #96]	; (80001c0 <LCD_Delay_us+0x74>)
 800015e:	fba2 2303 	umull	r2, r3, r2, r3
 8000162:	099b      	lsrs	r3, r3, #6
 8000164:	60fb      	str	r3, [r7, #12]
  uint32_t  StartMicros = HAL_GetTick()*1000 + (1000- SysTick->VAL/Div);
 8000166:	f000 fe55 	bl	8000e14 <HAL_GetTick>
 800016a:	4603      	mov	r3, r0
 800016c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000170:	fb03 f202 	mul.w	r2, r3, r2
 8000174:	4b11      	ldr	r3, [pc, #68]	; (80001bc <LCD_Delay_us+0x70>)
 8000176:	6899      	ldr	r1, [r3, #8]
 8000178:	68fb      	ldr	r3, [r7, #12]
 800017a:	fbb1 f3f3 	udiv	r3, r1, r3
 800017e:	1ad3      	subs	r3, r2, r3
 8000180:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000184:	60bb      	str	r3, [r7, #8]
  while((HAL_GetTick()*1000 + (1000-SysTick->VAL/Div)-StartMicros < us));  
 8000186:	bf00      	nop
 8000188:	f000 fe44 	bl	8000e14 <HAL_GetTick>
 800018c:	4603      	mov	r3, r0
 800018e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000192:	fb03 f202 	mul.w	r2, r3, r2
 8000196:	4b09      	ldr	r3, [pc, #36]	; (80001bc <LCD_Delay_us+0x70>)
 8000198:	6899      	ldr	r1, [r3, #8]
 800019a:	68fb      	ldr	r3, [r7, #12]
 800019c:	fbb1 f3f3 	udiv	r3, r1, r3
 80001a0:	1ad2      	subs	r2, r2, r3
 80001a2:	68bb      	ldr	r3, [r7, #8]
 80001a4:	1ad3      	subs	r3, r2, r3
 80001a6:	f503 727a 	add.w	r2, r3, #1000	; 0x3e8
 80001aa:	88fb      	ldrh	r3, [r7, #6]
 80001ac:	429a      	cmp	r2, r3
 80001ae:	d3eb      	bcc.n	8000188 <LCD_Delay_us+0x3c>
}
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	3710      	adds	r7, #16
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	bf00      	nop
 80001bc:	e000e010 	.word	0xe000e010
 80001c0:	10624dd3 	.word	0x10624dd3

080001c4 <LCD_Delay_ms>:
//############################################################################################
void  LCD_Delay_ms(uint8_t  ms)
{
 80001c4:	b580      	push	{r7, lr}
 80001c6:	b082      	sub	sp, #8
 80001c8:	af00      	add	r7, sp, #0
 80001ca:	4603      	mov	r3, r0
 80001cc:	71fb      	strb	r3, [r7, #7]
  #if _LCD_USE_FREERTOS==1
  osDelay(ms);
  #else
  HAL_Delay(ms);
 80001ce:	79fb      	ldrb	r3, [r7, #7]
 80001d0:	4618      	mov	r0, r3
 80001d2:	f000 fe29 	bl	8000e28 <HAL_Delay>
  #endif  
}
 80001d6:	bf00      	nop
 80001d8:	3708      	adds	r7, #8
 80001da:	46bd      	mov	sp, r7
 80001dc:	bd80      	pop	{r7, pc}
	...

080001e0 <LCD_Init_High>:
//############################################################################################
void LCD_Init_High(void)
{	
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	while(HAL_GetTick()<200)
 80001e4:	e002      	b.n	80001ec <LCD_Init_High+0xc>
    LCD_Delay_ms(1);
 80001e6:	2001      	movs	r0, #1
 80001e8:	f7ff ffec 	bl	80001c4 <LCD_Delay_ms>
	while(HAL_GetTick()<200)
 80001ec:	f000 fe12 	bl	8000e14 <HAL_GetTick>
 80001f0:	4603      	mov	r3, r0
 80001f2:	2bc7      	cmp	r3, #199	; 0xc7
 80001f4:	d9f7      	bls.n	80001e6 <LCD_Init_High+0x6>
	/* Set cursor pointer to beginning for LCD */
	LCD_Opts_High.currentX = 0;
 80001f6:	4b23      	ldr	r3, [pc, #140]	; (8000284 <LCD_Init_High+0xa4>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	70da      	strb	r2, [r3, #3]
	LCD_Opts_High.currentY = 0;
 80001fc:	4b21      	ldr	r3, [pc, #132]	; (8000284 <LCD_Init_High+0xa4>)
 80001fe:	2200      	movs	r2, #0
 8000200:	711a      	strb	r2, [r3, #4]
	LCD_Opts_High.DisplayFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_1LINE;
 8000202:	4b20      	ldr	r3, [pc, #128]	; (8000284 <LCD_Init_High+0xa4>)
 8000204:	2200      	movs	r2, #0
 8000206:	705a      	strb	r2, [r3, #1]
	if (_LCD_ROWS > 1)
		LCD_Opts_High.DisplayFunction |= LCD_2LINE;
 8000208:	4b1e      	ldr	r3, [pc, #120]	; (8000284 <LCD_Init_High+0xa4>)
 800020a:	785b      	ldrb	r3, [r3, #1]
 800020c:	f043 0308 	orr.w	r3, r3, #8
 8000210:	b2da      	uxtb	r2, r3
 8000212:	4b1c      	ldr	r3, [pc, #112]	; (8000284 <LCD_Init_High+0xa4>)
 8000214:	705a      	strb	r2, [r3, #1]
	/* Try to set 4bit mode */
	LCD_Cmd4bit_High(0x03);
 8000216:	2003      	movs	r0, #3
 8000218:	f000 f8ee 	bl	80003f8 <LCD_Cmd4bit_High>
	LCD_Delay_ms(5);
 800021c:	2005      	movs	r0, #5
 800021e:	f7ff ffd1 	bl	80001c4 <LCD_Delay_ms>
	/* Second try */
	LCD_Cmd4bit_High(0x03);
 8000222:	2003      	movs	r0, #3
 8000224:	f000 f8e8 	bl	80003f8 <LCD_Cmd4bit_High>
	LCD_Delay_ms(5);
 8000228:	2005      	movs	r0, #5
 800022a:	f7ff ffcb 	bl	80001c4 <LCD_Delay_ms>
	/* Third goo! */
	LCD_Cmd4bit_High(0x03);
 800022e:	2003      	movs	r0, #3
 8000230:	f000 f8e2 	bl	80003f8 <LCD_Cmd4bit_High>
	LCD_Delay_ms(5);
 8000234:	2005      	movs	r0, #5
 8000236:	f7ff ffc5 	bl	80001c4 <LCD_Delay_ms>
	/* Set 4-bit interface */
	LCD_Cmd4bit_High(0x02);
 800023a:	2002      	movs	r0, #2
 800023c:	f000 f8dc 	bl	80003f8 <LCD_Cmd4bit_High>
	LCD_Delay_ms(5);
 8000240:	2005      	movs	r0, #5
 8000242:	f7ff ffbf 	bl	80001c4 <LCD_Delay_ms>
	/* Set # lines, font size, etc. */
	LCD_Cmd_High(LCD_FUNCTIONSET | LCD_Opts_High.DisplayFunction);
 8000246:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <LCD_Init_High+0xa4>)
 8000248:	785b      	ldrb	r3, [r3, #1]
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	b2db      	uxtb	r3, r3
 8000250:	4618      	mov	r0, r3
 8000252:	f000 f895 	bl	8000380 <LCD_Cmd_High>
	/* Turn the display on with no cursor or blinking default */
	LCD_Opts_High.DisplayControl = LCD_DISPLAYON;
 8000256:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <LCD_Init_High+0xa4>)
 8000258:	2204      	movs	r2, #4
 800025a:	701a      	strb	r2, [r3, #0]
	LCD_DisplayOn_High();
 800025c:	f000 f87a 	bl	8000354 <LCD_DisplayOn_High>
	LCD_Clear_High();
 8000260:	f000 f812 	bl	8000288 <LCD_Clear_High>
	/* Default font directions */
	LCD_Opts_High.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000264:	4b07      	ldr	r3, [pc, #28]	; (8000284 <LCD_Init_High+0xa4>)
 8000266:	2202      	movs	r2, #2
 8000268:	709a      	strb	r2, [r3, #2]
	LCD_Cmd_High(LCD_ENTRYMODESET | LCD_Opts_High.DisplayMode);
 800026a:	4b06      	ldr	r3, [pc, #24]	; (8000284 <LCD_Init_High+0xa4>)
 800026c:	789b      	ldrb	r3, [r3, #2]
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	b2db      	uxtb	r3, r3
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f883 	bl	8000380 <LCD_Cmd_High>
	LCD_Delay_ms(5);
 800027a:	2005      	movs	r0, #5
 800027c:	f7ff ffa2 	bl	80001c4 <LCD_Delay_ms>
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000028 	.word	0x20000028

08000288 <LCD_Clear_High>:
//############################################################################################
void LCD_Clear_High(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	LCD_Cmd_High(LCD_CLEARDISPLAY);
 800028c:	2001      	movs	r0, #1
 800028e:	f000 f877 	bl	8000380 <LCD_Cmd_High>
	LCD_Delay_ms(5);
 8000292:	2005      	movs	r0, #5
 8000294:	f7ff ff96 	bl	80001c4 <LCD_Delay_ms>
}
 8000298:	bf00      	nop
 800029a:	bd80      	pop	{r7, pc}

0800029c <LCD_Puts_High>:
//############################################################################################
void LCD_Puts_High(uint8_t x, uint8_t y, char* str)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b082      	sub	sp, #8
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	603a      	str	r2, [r7, #0]
 80002a6:	71fb      	strb	r3, [r7, #7]
 80002a8:	460b      	mov	r3, r1
 80002aa:	71bb      	strb	r3, [r7, #6]
	LCD_CursorSet_High(x, y);
 80002ac:	79ba      	ldrb	r2, [r7, #6]
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	4611      	mov	r1, r2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f000 f8e4 	bl	8000480 <LCD_CursorSet_High>
	while (*str)
 80002b8:	e040      	b.n	800033c <LCD_Puts_High+0xa0>
  {
		if (LCD_Opts_High.currentX >= _LCD_COLS)
 80002ba:	4b25      	ldr	r3, [pc, #148]	; (8000350 <LCD_Puts_High+0xb4>)
 80002bc:	78db      	ldrb	r3, [r3, #3]
 80002be:	2b27      	cmp	r3, #39	; 0x27
 80002c0:	d910      	bls.n	80002e4 <LCD_Puts_High+0x48>
    {
			LCD_Opts_High.currentX = 0;
 80002c2:	4b23      	ldr	r3, [pc, #140]	; (8000350 <LCD_Puts_High+0xb4>)
 80002c4:	2200      	movs	r2, #0
 80002c6:	70da      	strb	r2, [r3, #3]
			LCD_Opts_High.currentY++;
 80002c8:	4b21      	ldr	r3, [pc, #132]	; (8000350 <LCD_Puts_High+0xb4>)
 80002ca:	791b      	ldrb	r3, [r3, #4]
 80002cc:	3301      	adds	r3, #1
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b1f      	ldr	r3, [pc, #124]	; (8000350 <LCD_Puts_High+0xb4>)
 80002d2:	711a      	strb	r2, [r3, #4]
			LCD_CursorSet_High(LCD_Opts_High.currentX, LCD_Opts_High.currentY);
 80002d4:	4b1e      	ldr	r3, [pc, #120]	; (8000350 <LCD_Puts_High+0xb4>)
 80002d6:	78db      	ldrb	r3, [r3, #3]
 80002d8:	4a1d      	ldr	r2, [pc, #116]	; (8000350 <LCD_Puts_High+0xb4>)
 80002da:	7912      	ldrb	r2, [r2, #4]
 80002dc:	4611      	mov	r1, r2
 80002de:	4618      	mov	r0, r3
 80002e0:	f000 f8ce 	bl	8000480 <LCD_CursorSet_High>
		}
		if (*str == '\n')
 80002e4:	683b      	ldr	r3, [r7, #0]
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	2b0a      	cmp	r3, #10
 80002ea:	d10e      	bne.n	800030a <LCD_Puts_High+0x6e>
    {
			LCD_Opts_High.currentY++;
 80002ec:	4b18      	ldr	r3, [pc, #96]	; (8000350 <LCD_Puts_High+0xb4>)
 80002ee:	791b      	ldrb	r3, [r3, #4]
 80002f0:	3301      	adds	r3, #1
 80002f2:	b2da      	uxtb	r2, r3
 80002f4:	4b16      	ldr	r3, [pc, #88]	; (8000350 <LCD_Puts_High+0xb4>)
 80002f6:	711a      	strb	r2, [r3, #4]
			LCD_CursorSet_High(LCD_Opts_High.currentX, LCD_Opts_High.currentY);
 80002f8:	4b15      	ldr	r3, [pc, #84]	; (8000350 <LCD_Puts_High+0xb4>)
 80002fa:	78db      	ldrb	r3, [r3, #3]
 80002fc:	4a14      	ldr	r2, [pc, #80]	; (8000350 <LCD_Puts_High+0xb4>)
 80002fe:	7912      	ldrb	r2, [r2, #4]
 8000300:	4611      	mov	r1, r2
 8000302:	4618      	mov	r0, r3
 8000304:	f000 f8bc 	bl	8000480 <LCD_CursorSet_High>
 8000308:	e015      	b.n	8000336 <LCD_Puts_High+0x9a>
		}
    else if (*str == '\r')
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	2b0d      	cmp	r3, #13
 8000310:	d106      	bne.n	8000320 <LCD_Puts_High+0x84>
    {
			LCD_CursorSet_High(0, LCD_Opts_High.currentY);
 8000312:	4b0f      	ldr	r3, [pc, #60]	; (8000350 <LCD_Puts_High+0xb4>)
 8000314:	791b      	ldrb	r3, [r3, #4]
 8000316:	4619      	mov	r1, r3
 8000318:	2000      	movs	r0, #0
 800031a:	f000 f8b1 	bl	8000480 <LCD_CursorSet_High>
 800031e:	e00a      	b.n	8000336 <LCD_Puts_High+0x9a>
		}
    else
    {
			LCD_Data_High(*str);
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	4618      	mov	r0, r3
 8000326:	f000 f849 	bl	80003bc <LCD_Data_High>
			LCD_Opts_High.currentX++;
 800032a:	4b09      	ldr	r3, [pc, #36]	; (8000350 <LCD_Puts_High+0xb4>)
 800032c:	78db      	ldrb	r3, [r3, #3]
 800032e:	3301      	adds	r3, #1
 8000330:	b2da      	uxtb	r2, r3
 8000332:	4b07      	ldr	r3, [pc, #28]	; (8000350 <LCD_Puts_High+0xb4>)
 8000334:	70da      	strb	r2, [r3, #3]
		}
		str++;
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	3301      	adds	r3, #1
 800033a:	603b      	str	r3, [r7, #0]
	while (*str)
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	781b      	ldrb	r3, [r3, #0]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d1ba      	bne.n	80002ba <LCD_Puts_High+0x1e>
	}
}
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	3708      	adds	r7, #8
 800034a:	46bd      	mov	sp, r7
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	20000028 	.word	0x20000028

08000354 <LCD_DisplayOn_High>:
//############################################################################################
void LCD_DisplayOn_High(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	LCD_Opts_High.DisplayControl |= LCD_DISPLAYON;
 8000358:	4b08      	ldr	r3, [pc, #32]	; (800037c <LCD_DisplayOn_High+0x28>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	f043 0304 	orr.w	r3, r3, #4
 8000360:	b2da      	uxtb	r2, r3
 8000362:	4b06      	ldr	r3, [pc, #24]	; (800037c <LCD_DisplayOn_High+0x28>)
 8000364:	701a      	strb	r2, [r3, #0]
	LCD_Cmd_High(LCD_DISPLAYCONTROL | LCD_Opts_High.DisplayControl);
 8000366:	4b05      	ldr	r3, [pc, #20]	; (800037c <LCD_DisplayOn_High+0x28>)
 8000368:	781b      	ldrb	r3, [r3, #0]
 800036a:	f043 0308 	orr.w	r3, r3, #8
 800036e:	b2db      	uxtb	r3, r3
 8000370:	4618      	mov	r0, r3
 8000372:	f000 f805 	bl	8000380 <LCD_Cmd_High>
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	20000028 	.word	0x20000028

08000380 <LCD_Cmd_High>:
	LCD_CursorSet_High(x, y);
	LCD_Data_High(location);
}
//############################################################################################
static void LCD_Cmd_High(uint8_t cmd)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	LCD_RS_LOW;
 800038a:	2200      	movs	r2, #0
 800038c:	2120      	movs	r1, #32
 800038e:	480a      	ldr	r0, [pc, #40]	; (80003b8 <LCD_Cmd_High+0x38>)
 8000390:	f000 ffd6 	bl	8001340 <HAL_GPIO_WritePin>
	LCD_Cmd4bit_High(cmd >> 4);
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	091b      	lsrs	r3, r3, #4
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4618      	mov	r0, r3
 800039c:	f000 f82c 	bl	80003f8 <LCD_Cmd4bit_High>
	LCD_Cmd4bit_High(cmd & 0x0F);
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	f003 030f 	and.w	r3, r3, #15
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f825 	bl	80003f8 <LCD_Cmd4bit_High>
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40010800 	.word	0x40010800

080003bc <LCD_Data_High>:
//############################################################################################
static void LCD_Data_High(uint8_t data)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	4603      	mov	r3, r0
 80003c4:	71fb      	strb	r3, [r7, #7]
	LCD_RS_HIGH;
 80003c6:	2201      	movs	r2, #1
 80003c8:	2120      	movs	r1, #32
 80003ca:	480a      	ldr	r0, [pc, #40]	; (80003f4 <LCD_Data_High+0x38>)
 80003cc:	f000 ffb8 	bl	8001340 <HAL_GPIO_WritePin>
	LCD_Cmd4bit_High(data >> 4);
 80003d0:	79fb      	ldrb	r3, [r7, #7]
 80003d2:	091b      	lsrs	r3, r3, #4
 80003d4:	b2db      	uxtb	r3, r3
 80003d6:	4618      	mov	r0, r3
 80003d8:	f000 f80e 	bl	80003f8 <LCD_Cmd4bit_High>
	LCD_Cmd4bit_High(data & 0x0F);
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	f003 030f 	and.w	r3, r3, #15
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 f807 	bl	80003f8 <LCD_Cmd4bit_High>
}
 80003ea:	bf00      	nop
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40010800 	.word	0x40010800

080003f8 <LCD_Cmd4bit_High>:
//############################################################################################
static void LCD_Cmd4bit_High(uint8_t cmd)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	4603      	mov	r3, r0
 8000400:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(_LCD_D7_PORT, _LCD_D7_PIN, (GPIO_PinState)(cmd & 0x08));
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	f003 0308 	and.w	r3, r3, #8
 8000408:	b2db      	uxtb	r3, r3
 800040a:	461a      	mov	r2, r3
 800040c:	2102      	movs	r1, #2
 800040e:	481a      	ldr	r0, [pc, #104]	; (8000478 <LCD_Cmd4bit_High+0x80>)
 8000410:	f000 ff96 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D6_PORT, _LCD_D6_PIN, (GPIO_PinState)(cmd & 0x04));
 8000414:	79fb      	ldrb	r3, [r7, #7]
 8000416:	f003 0304 	and.w	r3, r3, #4
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000422:	4816      	ldr	r0, [pc, #88]	; (800047c <LCD_Cmd4bit_High+0x84>)
 8000424:	f000 ff8c 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D5_PORT, _LCD_D5_PIN, (GPIO_PinState)(cmd & 0x02));
 8000428:	79fb      	ldrb	r3, [r7, #7]
 800042a:	f003 0302 	and.w	r3, r3, #2
 800042e:	b2db      	uxtb	r3, r3
 8000430:	461a      	mov	r2, r3
 8000432:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000436:	4811      	ldr	r0, [pc, #68]	; (800047c <LCD_Cmd4bit_High+0x84>)
 8000438:	f000 ff82 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D4_PORT, _LCD_D4_PIN, (GPIO_PinState)(cmd & 0x01));
 800043c:	79fb      	ldrb	r3, [r7, #7]
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	b2db      	uxtb	r3, r3
 8000444:	461a      	mov	r2, r3
 8000446:	2101      	movs	r1, #1
 8000448:	480b      	ldr	r0, [pc, #44]	; (8000478 <LCD_Cmd4bit_High+0x80>)
 800044a:	f000 ff79 	bl	8001340 <HAL_GPIO_WritePin>
	LCD_E_BLINK;
 800044e:	2201      	movs	r2, #1
 8000450:	2104      	movs	r1, #4
 8000452:	4809      	ldr	r0, [pc, #36]	; (8000478 <LCD_Cmd4bit_High+0x80>)
 8000454:	f000 ff74 	bl	8001340 <HAL_GPIO_WritePin>
 8000458:	2032      	movs	r0, #50	; 0x32
 800045a:	f7ff fe77 	bl	800014c <LCD_Delay_us>
 800045e:	2200      	movs	r2, #0
 8000460:	2104      	movs	r1, #4
 8000462:	4805      	ldr	r0, [pc, #20]	; (8000478 <LCD_Cmd4bit_High+0x80>)
 8000464:	f000 ff6c 	bl	8001340 <HAL_GPIO_WritePin>
 8000468:	2032      	movs	r0, #50	; 0x32
 800046a:	f7ff fe6f 	bl	800014c <LCD_Delay_us>
}
 800046e:	bf00      	nop
 8000470:	3708      	adds	r7, #8
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40010800 	.word	0x40010800
 800047c:	40011000 	.word	0x40011000

08000480 <LCD_CursorSet_High>:
//############################################################################################
static void LCD_CursorSet_High(uint8_t col, uint8_t row)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	460a      	mov	r2, r1
 800048a:	71fb      	strb	r3, [r7, #7]
 800048c:	4613      	mov	r3, r2
 800048e:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000490:	4b10      	ldr	r3, [pc, #64]	; (80004d4 <LCD_CursorSet_High+0x54>)
 8000492:	60fb      	str	r3, [r7, #12]
	if (row >= _LCD_ROWS)
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	2b03      	cmp	r3, #3
 8000498:	d901      	bls.n	800049e <LCD_CursorSet_High+0x1e>
		row = 0;
 800049a:	2300      	movs	r3, #0
 800049c:	71bb      	strb	r3, [r7, #6]
	LCD_Opts_High.currentX = col;
 800049e:	4a0e      	ldr	r2, [pc, #56]	; (80004d8 <LCD_CursorSet_High+0x58>)
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	70d3      	strb	r3, [r2, #3]
	LCD_Opts_High.currentY = row;
 80004a4:	4a0c      	ldr	r2, [pc, #48]	; (80004d8 <LCD_CursorSet_High+0x58>)
 80004a6:	79bb      	ldrb	r3, [r7, #6]
 80004a8:	7113      	strb	r3, [r2, #4]
	LCD_Cmd_High(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 80004aa:	79bb      	ldrb	r3, [r7, #6]
 80004ac:	3310      	adds	r3, #16
 80004ae:	443b      	add	r3, r7
 80004b0:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	4413      	add	r3, r2
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	b25b      	sxtb	r3, r3
 80004bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004c0:	b25b      	sxtb	r3, r3
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff ff5b 	bl	8000380 <LCD_Cmd_High>
}
 80004ca:	bf00      	nop
 80004cc:	3710      	adds	r7, #16
 80004ce:	46bd      	mov	sp, r7
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	54144000 	.word	0x54144000
 80004d8:	20000028 	.word	0x20000028

080004dc <LCD_Init_Port>:

void LCD_Init_Port(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef  gpio;
	  gpio.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	607b      	str	r3, [r7, #4]
	  gpio.Speed = GPIO_SPEED_FREQ_HIGH;
 80004e6:	2303      	movs	r3, #3
 80004e8:	60fb      	str	r3, [r7, #12]
	  gpio.Pull = GPIO_NOPULL;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60bb      	str	r3, [r7, #8]

	  gpio.Pin = _LCD_RS_PIN;
 80004ee:	2320      	movs	r3, #32
 80004f0:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_Init(_LCD_RS_PORT,&gpio);
 80004f2:	463b      	mov	r3, r7
 80004f4:	4619      	mov	r1, r3
 80004f6:	481d      	ldr	r0, [pc, #116]	; (800056c <LCD_Init_Port+0x90>)
 80004f8:	f000 fd9e 	bl	8001038 <HAL_GPIO_Init>
	  gpio.Pin = _LCD_E_PIN;
 80004fc:	2304      	movs	r3, #4
 80004fe:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_Init(_LCD_E_PORT,&gpio);
 8000500:	463b      	mov	r3, r7
 8000502:	4619      	mov	r1, r3
 8000504:	4819      	ldr	r0, [pc, #100]	; (800056c <LCD_Init_Port+0x90>)
 8000506:	f000 fd97 	bl	8001038 <HAL_GPIO_Init>
	  gpio.Pin = _LCD_RW_PIN;
 800050a:	2308      	movs	r3, #8
 800050c:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_Init(_LCD_RW_PORT,&gpio);
 800050e:	463b      	mov	r3, r7
 8000510:	4619      	mov	r1, r3
 8000512:	4816      	ldr	r0, [pc, #88]	; (800056c <LCD_Init_Port+0x90>)
 8000514:	f000 fd90 	bl	8001038 <HAL_GPIO_Init>
	  gpio.Pin = _LCD_D4_PIN;
 8000518:	2301      	movs	r3, #1
 800051a:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_Init(_LCD_D4_PORT,&gpio);
 800051c:	463b      	mov	r3, r7
 800051e:	4619      	mov	r1, r3
 8000520:	4812      	ldr	r0, [pc, #72]	; (800056c <LCD_Init_Port+0x90>)
 8000522:	f000 fd89 	bl	8001038 <HAL_GPIO_Init>
	  gpio.Pin = _LCD_D5_PIN;
 8000526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800052a:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_Init(_LCD_D5_PORT,&gpio);
 800052c:	463b      	mov	r3, r7
 800052e:	4619      	mov	r1, r3
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <LCD_Init_Port+0x94>)
 8000532:	f000 fd81 	bl	8001038 <HAL_GPIO_Init>
	  gpio.Pin = _LCD_D6_PIN;
 8000536:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800053a:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_Init(_LCD_D6_PORT,&gpio);
 800053c:	463b      	mov	r3, r7
 800053e:	4619      	mov	r1, r3
 8000540:	480b      	ldr	r0, [pc, #44]	; (8000570 <LCD_Init_Port+0x94>)
 8000542:	f000 fd79 	bl	8001038 <HAL_GPIO_Init>
	  gpio.Pin = _LCD_D7_PIN;
 8000546:	2302      	movs	r3, #2
 8000548:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_Init(_LCD_D7_PORT,&gpio);
 800054a:	463b      	mov	r3, r7
 800054c:	4619      	mov	r1, r3
 800054e:	4807      	ldr	r0, [pc, #28]	; (800056c <LCD_Init_Port+0x90>)
 8000550:	f000 fd72 	bl	8001038 <HAL_GPIO_Init>
	  gpio.Pin = _LCD_E_2_PIN;
 8000554:	2310      	movs	r3, #16
 8000556:	603b      	str	r3, [r7, #0]
	  HAL_GPIO_Init(_LCD_E_2_PORT,&gpio);
 8000558:	463b      	mov	r3, r7
 800055a:	4619      	mov	r1, r3
 800055c:	4803      	ldr	r0, [pc, #12]	; (800056c <LCD_Init_Port+0x90>)
 800055e:	f000 fd6b 	bl	8001038 <HAL_GPIO_Init>
}
 8000562:	bf00      	nop
 8000564:	3710      	adds	r7, #16
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40010800 	.word	0x40010800
 8000570:	40011000 	.word	0x40011000

08000574 <LCD_Init_Low>:

//############################################################################################
void LCD_Init_Low(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
	while(HAL_GetTick()<200)
 8000578:	e002      	b.n	8000580 <LCD_Init_Low+0xc>
    LCD_Delay_ms(1);
 800057a:	2001      	movs	r0, #1
 800057c:	f7ff fe22 	bl	80001c4 <LCD_Delay_ms>
	while(HAL_GetTick()<200)
 8000580:	f000 fc48 	bl	8000e14 <HAL_GetTick>
 8000584:	4603      	mov	r3, r0
 8000586:	2bc7      	cmp	r3, #199	; 0xc7
 8000588:	d9f7      	bls.n	800057a <LCD_Init_Low+0x6>
	/* Set cursor pointer to beginning for LCD */
	LCD_Opts_Low.currentX = 0;
 800058a:	4b23      	ldr	r3, [pc, #140]	; (8000618 <LCD_Init_Low+0xa4>)
 800058c:	2200      	movs	r2, #0
 800058e:	70da      	strb	r2, [r3, #3]
	LCD_Opts_Low.currentY = 0;
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <LCD_Init_Low+0xa4>)
 8000592:	2200      	movs	r2, #0
 8000594:	711a      	strb	r2, [r3, #4]
	LCD_Opts_Low.DisplayFunction = LCD_4BITMODE | LCD_5x8DOTS | LCD_1LINE;
 8000596:	4b20      	ldr	r3, [pc, #128]	; (8000618 <LCD_Init_Low+0xa4>)
 8000598:	2200      	movs	r2, #0
 800059a:	705a      	strb	r2, [r3, #1]
	if (_LCD_ROWS > 1)
		LCD_Opts_Low.DisplayFunction |= LCD_2LINE;
 800059c:	4b1e      	ldr	r3, [pc, #120]	; (8000618 <LCD_Init_Low+0xa4>)
 800059e:	785b      	ldrb	r3, [r3, #1]
 80005a0:	f043 0308 	orr.w	r3, r3, #8
 80005a4:	b2da      	uxtb	r2, r3
 80005a6:	4b1c      	ldr	r3, [pc, #112]	; (8000618 <LCD_Init_Low+0xa4>)
 80005a8:	705a      	strb	r2, [r3, #1]
	/* Try to set 4bit mode */
	LCD_Cmd4bit_Low(0x03);
 80005aa:	2003      	movs	r0, #3
 80005ac:	f000 f8ee 	bl	800078c <LCD_Cmd4bit_Low>
	LCD_Delay_ms(5);
 80005b0:	2005      	movs	r0, #5
 80005b2:	f7ff fe07 	bl	80001c4 <LCD_Delay_ms>
	/* Second try */
	LCD_Cmd4bit_Low(0x03);
 80005b6:	2003      	movs	r0, #3
 80005b8:	f000 f8e8 	bl	800078c <LCD_Cmd4bit_Low>
	LCD_Delay_ms(5);
 80005bc:	2005      	movs	r0, #5
 80005be:	f7ff fe01 	bl	80001c4 <LCD_Delay_ms>
	/* Third goo! */
	LCD_Cmd4bit_Low(0x03);
 80005c2:	2003      	movs	r0, #3
 80005c4:	f000 f8e2 	bl	800078c <LCD_Cmd4bit_Low>
	LCD_Delay_ms(5);
 80005c8:	2005      	movs	r0, #5
 80005ca:	f7ff fdfb 	bl	80001c4 <LCD_Delay_ms>
	/* Set 4-bit interface */
	LCD_Cmd4bit_Low(0x02);
 80005ce:	2002      	movs	r0, #2
 80005d0:	f000 f8dc 	bl	800078c <LCD_Cmd4bit_Low>
	LCD_Delay_ms(5);
 80005d4:	2005      	movs	r0, #5
 80005d6:	f7ff fdf5 	bl	80001c4 <LCD_Delay_ms>
	/* Set # lines, font size, etc. */
	LCD_Cmd_Low(LCD_FUNCTIONSET | LCD_Opts_Low.DisplayFunction);
 80005da:	4b0f      	ldr	r3, [pc, #60]	; (8000618 <LCD_Init_Low+0xa4>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	f043 0320 	orr.w	r3, r3, #32
 80005e2:	b2db      	uxtb	r3, r3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 f895 	bl	8000714 <LCD_Cmd_Low>
	/* Turn the display on with no cursor or blinking default */
	LCD_Opts_Low.DisplayControl = LCD_DISPLAYON;
 80005ea:	4b0b      	ldr	r3, [pc, #44]	; (8000618 <LCD_Init_Low+0xa4>)
 80005ec:	2204      	movs	r2, #4
 80005ee:	701a      	strb	r2, [r3, #0]
	LCD_DisplayOn_Low();
 80005f0:	f000 f87a 	bl	80006e8 <LCD_DisplayOn_Low>
	LCD_Clear_Low();
 80005f4:	f000 f812 	bl	800061c <LCD_Clear_Low>
	/* Default font directions */
	LCD_Opts_Low.DisplayMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80005f8:	4b07      	ldr	r3, [pc, #28]	; (8000618 <LCD_Init_Low+0xa4>)
 80005fa:	2202      	movs	r2, #2
 80005fc:	709a      	strb	r2, [r3, #2]
	LCD_Cmd_Low(LCD_ENTRYMODESET | LCD_Opts_Low.DisplayMode);
 80005fe:	4b06      	ldr	r3, [pc, #24]	; (8000618 <LCD_Init_Low+0xa4>)
 8000600:	789b      	ldrb	r3, [r3, #2]
 8000602:	f043 0304 	orr.w	r3, r3, #4
 8000606:	b2db      	uxtb	r3, r3
 8000608:	4618      	mov	r0, r3
 800060a:	f000 f883 	bl	8000714 <LCD_Cmd_Low>
	LCD_Delay_ms(5);
 800060e:	2005      	movs	r0, #5
 8000610:	f7ff fdd8 	bl	80001c4 <LCD_Delay_ms>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	20000030 	.word	0x20000030

0800061c <LCD_Clear_Low>:
//############################################################################################
void LCD_Clear_Low(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	LCD_Cmd_Low(LCD_CLEARDISPLAY);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f877 	bl	8000714 <LCD_Cmd_Low>
	LCD_Delay_ms(5);
 8000626:	2005      	movs	r0, #5
 8000628:	f7ff fdcc 	bl	80001c4 <LCD_Delay_ms>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}

08000630 <LCD_Puts_Low>:
//############################################################################################
void LCD_Puts_Low(uint8_t x, uint8_t y, char* str)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	603a      	str	r2, [r7, #0]
 800063a:	71fb      	strb	r3, [r7, #7]
 800063c:	460b      	mov	r3, r1
 800063e:	71bb      	strb	r3, [r7, #6]
	LCD_CursorSet_Low(x, y);
 8000640:	79ba      	ldrb	r2, [r7, #6]
 8000642:	79fb      	ldrb	r3, [r7, #7]
 8000644:	4611      	mov	r1, r2
 8000646:	4618      	mov	r0, r3
 8000648:	f000 f8e4 	bl	8000814 <LCD_CursorSet_Low>
	while (*str)
 800064c:	e040      	b.n	80006d0 <LCD_Puts_Low+0xa0>
  {
		if (LCD_Opts_Low.currentX >= _LCD_COLS)
 800064e:	4b25      	ldr	r3, [pc, #148]	; (80006e4 <LCD_Puts_Low+0xb4>)
 8000650:	78db      	ldrb	r3, [r3, #3]
 8000652:	2b27      	cmp	r3, #39	; 0x27
 8000654:	d910      	bls.n	8000678 <LCD_Puts_Low+0x48>
    {
			LCD_Opts_Low.currentX = 0;
 8000656:	4b23      	ldr	r3, [pc, #140]	; (80006e4 <LCD_Puts_Low+0xb4>)
 8000658:	2200      	movs	r2, #0
 800065a:	70da      	strb	r2, [r3, #3]
			LCD_Opts_Low.currentY++;
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <LCD_Puts_Low+0xb4>)
 800065e:	791b      	ldrb	r3, [r3, #4]
 8000660:	3301      	adds	r3, #1
 8000662:	b2da      	uxtb	r2, r3
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <LCD_Puts_Low+0xb4>)
 8000666:	711a      	strb	r2, [r3, #4]
			LCD_CursorSet_Low(LCD_Opts_Low.currentX, LCD_Opts_Low.currentY);
 8000668:	4b1e      	ldr	r3, [pc, #120]	; (80006e4 <LCD_Puts_Low+0xb4>)
 800066a:	78db      	ldrb	r3, [r3, #3]
 800066c:	4a1d      	ldr	r2, [pc, #116]	; (80006e4 <LCD_Puts_Low+0xb4>)
 800066e:	7912      	ldrb	r2, [r2, #4]
 8000670:	4611      	mov	r1, r2
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f8ce 	bl	8000814 <LCD_CursorSet_Low>
		}
		if (*str == '\n')
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b0a      	cmp	r3, #10
 800067e:	d10e      	bne.n	800069e <LCD_Puts_Low+0x6e>
    {
			LCD_Opts_Low.currentY++;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <LCD_Puts_Low+0xb4>)
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	3301      	adds	r3, #1
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <LCD_Puts_Low+0xb4>)
 800068a:	711a      	strb	r2, [r3, #4]
			LCD_CursorSet_Low(LCD_Opts_Low.currentX, LCD_Opts_Low.currentY);
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <LCD_Puts_Low+0xb4>)
 800068e:	78db      	ldrb	r3, [r3, #3]
 8000690:	4a14      	ldr	r2, [pc, #80]	; (80006e4 <LCD_Puts_Low+0xb4>)
 8000692:	7912      	ldrb	r2, [r2, #4]
 8000694:	4611      	mov	r1, r2
 8000696:	4618      	mov	r0, r3
 8000698:	f000 f8bc 	bl	8000814 <LCD_CursorSet_Low>
 800069c:	e015      	b.n	80006ca <LCD_Puts_Low+0x9a>
		}
    else if (*str == '\r')
 800069e:	683b      	ldr	r3, [r7, #0]
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	2b0d      	cmp	r3, #13
 80006a4:	d106      	bne.n	80006b4 <LCD_Puts_Low+0x84>
    {
			LCD_CursorSet_Low(0, LCD_Opts_Low.currentY);
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <LCD_Puts_Low+0xb4>)
 80006a8:	791b      	ldrb	r3, [r3, #4]
 80006aa:	4619      	mov	r1, r3
 80006ac:	2000      	movs	r0, #0
 80006ae:	f000 f8b1 	bl	8000814 <LCD_CursorSet_Low>
 80006b2:	e00a      	b.n	80006ca <LCD_Puts_Low+0x9a>
		}
    else
    {
			LCD_Data_Low(*str);
 80006b4:	683b      	ldr	r3, [r7, #0]
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 f849 	bl	8000750 <LCD_Data_Low>
			LCD_Opts_Low.currentX++;
 80006be:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <LCD_Puts_Low+0xb4>)
 80006c0:	78db      	ldrb	r3, [r3, #3]
 80006c2:	3301      	adds	r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b07      	ldr	r3, [pc, #28]	; (80006e4 <LCD_Puts_Low+0xb4>)
 80006c8:	70da      	strb	r2, [r3, #3]
		}
		str++;
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	3301      	adds	r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
	while (*str)
 80006d0:	683b      	ldr	r3, [r7, #0]
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d1ba      	bne.n	800064e <LCD_Puts_Low+0x1e>
	}
}
 80006d8:	bf00      	nop
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000030 	.word	0x20000030

080006e8 <LCD_DisplayOn_Low>:
//############################################################################################
void LCD_DisplayOn_Low(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	LCD_Opts_Low.DisplayControl |= LCD_DISPLAYON;
 80006ec:	4b08      	ldr	r3, [pc, #32]	; (8000710 <LCD_DisplayOn_Low+0x28>)
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	f043 0304 	orr.w	r3, r3, #4
 80006f4:	b2da      	uxtb	r2, r3
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <LCD_DisplayOn_Low+0x28>)
 80006f8:	701a      	strb	r2, [r3, #0]
	LCD_Cmd_Low(LCD_DISPLAYCONTROL | LCD_Opts_Low.DisplayControl);
 80006fa:	4b05      	ldr	r3, [pc, #20]	; (8000710 <LCD_DisplayOn_Low+0x28>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	f043 0308 	orr.w	r3, r3, #8
 8000702:	b2db      	uxtb	r3, r3
 8000704:	4618      	mov	r0, r3
 8000706:	f000 f805 	bl	8000714 <LCD_Cmd_Low>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000030 	.word	0x20000030

08000714 <LCD_Cmd_Low>:
	LCD_CursorSet_Low(x, y);
	LCD_Data_Low(location);
}
//############################################################################################
static void LCD_Cmd_Low(uint8_t cmd)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	71fb      	strb	r3, [r7, #7]
	LCD_RS_LOW;
 800071e:	2200      	movs	r2, #0
 8000720:	2120      	movs	r1, #32
 8000722:	480a      	ldr	r0, [pc, #40]	; (800074c <LCD_Cmd_Low+0x38>)
 8000724:	f000 fe0c 	bl	8001340 <HAL_GPIO_WritePin>
	LCD_Cmd4bit_Low(cmd >> 4);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	091b      	lsrs	r3, r3, #4
 800072c:	b2db      	uxtb	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	f000 f82c 	bl	800078c <LCD_Cmd4bit_Low>
	LCD_Cmd4bit_Low(cmd & 0x0F);
 8000734:	79fb      	ldrb	r3, [r7, #7]
 8000736:	f003 030f 	and.w	r3, r3, #15
 800073a:	b2db      	uxtb	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	f000 f825 	bl	800078c <LCD_Cmd4bit_Low>
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40010800 	.word	0x40010800

08000750 <LCD_Data_Low>:
//############################################################################################
static void LCD_Data_Low(uint8_t data)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	4603      	mov	r3, r0
 8000758:	71fb      	strb	r3, [r7, #7]
	LCD_RS_HIGH;
 800075a:	2201      	movs	r2, #1
 800075c:	2120      	movs	r1, #32
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <LCD_Data_Low+0x38>)
 8000760:	f000 fdee 	bl	8001340 <HAL_GPIO_WritePin>
	LCD_Cmd4bit_Low(data >> 4);
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	091b      	lsrs	r3, r3, #4
 8000768:	b2db      	uxtb	r3, r3
 800076a:	4618      	mov	r0, r3
 800076c:	f000 f80e 	bl	800078c <LCD_Cmd4bit_Low>
	LCD_Cmd4bit_Low(data & 0x0F);
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	f003 030f 	and.w	r3, r3, #15
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f000 f807 	bl	800078c <LCD_Cmd4bit_Low>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	40010800 	.word	0x40010800

0800078c <LCD_Cmd4bit_Low>:
//############################################################################################
static void LCD_Cmd4bit_Low(uint8_t cmd)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(_LCD_D7_PORT, _LCD_D7_PIN, (GPIO_PinState)(cmd & 0x08));
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 0308 	and.w	r3, r3, #8
 800079c:	b2db      	uxtb	r3, r3
 800079e:	461a      	mov	r2, r3
 80007a0:	2102      	movs	r1, #2
 80007a2:	481a      	ldr	r0, [pc, #104]	; (800080c <LCD_Cmd4bit_Low+0x80>)
 80007a4:	f000 fdcc 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D6_PORT, _LCD_D6_PIN, (GPIO_PinState)(cmd & 0x04));
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 0304 	and.w	r3, r3, #4
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	461a      	mov	r2, r3
 80007b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007b6:	4816      	ldr	r0, [pc, #88]	; (8000810 <LCD_Cmd4bit_Low+0x84>)
 80007b8:	f000 fdc2 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D5_PORT, _LCD_D5_PIN, (GPIO_PinState)(cmd & 0x02));
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f003 0302 	and.w	r3, r3, #2
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	461a      	mov	r2, r3
 80007c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007ca:	4811      	ldr	r0, [pc, #68]	; (8000810 <LCD_Cmd4bit_Low+0x84>)
 80007cc:	f000 fdb8 	bl	8001340 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(_LCD_D4_PORT, _LCD_D4_PIN, (GPIO_PinState)(cmd & 0x01));
 80007d0:	79fb      	ldrb	r3, [r7, #7]
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	2101      	movs	r1, #1
 80007dc:	480b      	ldr	r0, [pc, #44]	; (800080c <LCD_Cmd4bit_Low+0x80>)
 80007de:	f000 fdaf 	bl	8001340 <HAL_GPIO_WritePin>
	LCD_E_2_BLINK;
 80007e2:	2201      	movs	r2, #1
 80007e4:	2110      	movs	r1, #16
 80007e6:	4809      	ldr	r0, [pc, #36]	; (800080c <LCD_Cmd4bit_Low+0x80>)
 80007e8:	f000 fdaa 	bl	8001340 <HAL_GPIO_WritePin>
 80007ec:	2032      	movs	r0, #50	; 0x32
 80007ee:	f7ff fcad 	bl	800014c <LCD_Delay_us>
 80007f2:	2200      	movs	r2, #0
 80007f4:	2110      	movs	r1, #16
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <LCD_Cmd4bit_Low+0x80>)
 80007f8:	f000 fda2 	bl	8001340 <HAL_GPIO_WritePin>
 80007fc:	2032      	movs	r0, #50	; 0x32
 80007fe:	f7ff fca5 	bl	800014c <LCD_Delay_us>
}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40010800 	.word	0x40010800
 8000810:	40011000 	.word	0x40011000

08000814 <LCD_CursorSet_Low>:
//############################################################################################
static void LCD_CursorSet_Low(uint8_t col, uint8_t row)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	460a      	mov	r2, r1
 800081e:	71fb      	strb	r3, [r7, #7]
 8000820:	4613      	mov	r3, r2
 8000822:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <LCD_CursorSet_Low+0x54>)
 8000826:	60fb      	str	r3, [r7, #12]
	if (row >= _LCD_ROWS)
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	2b03      	cmp	r3, #3
 800082c:	d901      	bls.n	8000832 <LCD_CursorSet_Low+0x1e>
		row = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	71bb      	strb	r3, [r7, #6]
	LCD_Opts_Low.currentX = col;
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <LCD_CursorSet_Low+0x58>)
 8000834:	79fb      	ldrb	r3, [r7, #7]
 8000836:	70d3      	strb	r3, [r2, #3]
	LCD_Opts_Low.currentY = row;
 8000838:	4a0c      	ldr	r2, [pc, #48]	; (800086c <LCD_CursorSet_Low+0x58>)
 800083a:	79bb      	ldrb	r3, [r7, #6]
 800083c:	7113      	strb	r3, [r2, #4]
	LCD_Cmd_Low(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 800083e:	79bb      	ldrb	r3, [r7, #6]
 8000840:	3310      	adds	r3, #16
 8000842:	443b      	add	r3, r7
 8000844:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	4413      	add	r3, r2
 800084c:	b2db      	uxtb	r3, r3
 800084e:	b25b      	sxtb	r3, r3
 8000850:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000854:	b25b      	sxtb	r3, r3
 8000856:	b2db      	uxtb	r3, r3
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff ff5b 	bl	8000714 <LCD_Cmd_Low>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	54144000 	.word	0x54144000
 800086c:	20000030 	.word	0x20000030

08000870 <LCD_Init>:

void LCD_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	  LCD_Init_Port();
 8000874:	f7ff fe32 	bl	80004dc <LCD_Init_Port>
	  LCD_Init_High();
 8000878:	f7ff fcb2 	bl	80001e0 <LCD_Init_High>
	  LCD_Init_Low();
 800087c:	f7ff fe7a 	bl	8000574 <LCD_Init_Low>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b088      	sub	sp, #32
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0310 	add.w	r3, r7, #16
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000898:	4b3e      	ldr	r3, [pc, #248]	; (8000994 <MX_GPIO_Init+0x110>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a3d      	ldr	r2, [pc, #244]	; (8000994 <MX_GPIO_Init+0x110>)
 800089e:	f043 0310 	orr.w	r3, r3, #16
 80008a2:	6193      	str	r3, [r2, #24]
 80008a4:	4b3b      	ldr	r3, [pc, #236]	; (8000994 <MX_GPIO_Init+0x110>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	f003 0310 	and.w	r3, r3, #16
 80008ac:	60fb      	str	r3, [r7, #12]
 80008ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b0:	4b38      	ldr	r3, [pc, #224]	; (8000994 <MX_GPIO_Init+0x110>)
 80008b2:	699b      	ldr	r3, [r3, #24]
 80008b4:	4a37      	ldr	r2, [pc, #220]	; (8000994 <MX_GPIO_Init+0x110>)
 80008b6:	f043 0320 	orr.w	r3, r3, #32
 80008ba:	6193      	str	r3, [r2, #24]
 80008bc:	4b35      	ldr	r3, [pc, #212]	; (8000994 <MX_GPIO_Init+0x110>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	f003 0320 	and.w	r3, r3, #32
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c8:	4b32      	ldr	r3, [pc, #200]	; (8000994 <MX_GPIO_Init+0x110>)
 80008ca:	699b      	ldr	r3, [r3, #24]
 80008cc:	4a31      	ldr	r2, [pc, #196]	; (8000994 <MX_GPIO_Init+0x110>)
 80008ce:	f043 0304 	orr.w	r3, r3, #4
 80008d2:	6193      	str	r3, [r2, #24]
 80008d4:	4b2f      	ldr	r3, [pc, #188]	; (8000994 <MX_GPIO_Init+0x110>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	f003 0304 	and.w	r3, r3, #4
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e0:	4b2c      	ldr	r3, [pc, #176]	; (8000994 <MX_GPIO_Init+0x110>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	4a2b      	ldr	r2, [pc, #172]	; (8000994 <MX_GPIO_Init+0x110>)
 80008e6:	f043 0308 	orr.w	r3, r3, #8
 80008ea:	6193      	str	r3, [r2, #24]
 80008ec:	4b29      	ldr	r3, [pc, #164]	; (8000994 <MX_GPIO_Init+0x110>)
 80008ee:	699b      	ldr	r3, [r3, #24]
 80008f0:	f003 0308 	and.w	r3, r3, #8
 80008f4:	603b      	str	r3, [r7, #0]
 80008f6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RF_KEY_Pin|DB6_Pin|DB5_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80008fe:	4826      	ldr	r0, [pc, #152]	; (8000998 <MX_GPIO_Init+0x114>)
 8000900:	f000 fd1e 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DB4_Pin|DB7_Pin|E1_Pin|R_W_Pin
 8000904:	2200      	movs	r2, #0
 8000906:	213f      	movs	r1, #63	; 0x3f
 8000908:	4824      	ldr	r0, [pc, #144]	; (800099c <MX_GPIO_Init+0x118>)
 800090a:	f000 fd19 	bl	8001340 <HAL_GPIO_WritePin>
                          |E2_Pin|RS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ADC_RST_Pin|ADC_CS_Pin, GPIO_PIN_RESET);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000914:	4822      	ldr	r0, [pc, #136]	; (80009a0 <MX_GPIO_Init+0x11c>)
 8000916:	f000 fd13 	bl	8001340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RF_KEY_Pin|DB6_Pin|DB5_Pin;
 800091a:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800091e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2302      	movs	r3, #2
 800092a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092c:	f107 0310 	add.w	r3, r7, #16
 8000930:	4619      	mov	r1, r3
 8000932:	4819      	ldr	r0, [pc, #100]	; (8000998 <MX_GPIO_Init+0x114>)
 8000934:	f000 fb80 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin */
  GPIO_InitStruct.Pin = DB4_Pin|DB7_Pin|E1_Pin|R_W_Pin
 8000938:	233f      	movs	r3, #63	; 0x3f
 800093a:	613b      	str	r3, [r7, #16]
                          |E2_Pin|RS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2302      	movs	r3, #2
 8000946:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f107 0310 	add.w	r3, r7, #16
 800094c:	4619      	mov	r1, r3
 800094e:	4813      	ldr	r0, [pc, #76]	; (800099c <MX_GPIO_Init+0x118>)
 8000950:	f000 fb72 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADC_DRDY_Pin;
 8000954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000958:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800095a:	2300      	movs	r3, #0
 800095c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 8000962:	f107 0310 	add.w	r3, r7, #16
 8000966:	4619      	mov	r1, r3
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <MX_GPIO_Init+0x11c>)
 800096a:	f000 fb65 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ADC_RST_Pin|ADC_CS_Pin;
 800096e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000974:	2301      	movs	r3, #1
 8000976:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097c:	2302      	movs	r3, #2
 800097e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0310 	add.w	r3, r7, #16
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_GPIO_Init+0x11c>)
 8000988:	f000 fb56 	bl	8001038 <HAL_GPIO_Init>

}
 800098c:	bf00      	nop
 800098e:	3720      	adds	r7, #32
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40021000 	.word	0x40021000
 8000998:	40011000 	.word	0x40011000
 800099c:	40010800 	.word	0x40010800
 80009a0:	40010c00 	.word	0x40010c00

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009a8:	f000 f9dc 	bl	8000d64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ac:	f000 f818 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b0:	f7ff ff68 	bl	8000884 <MX_GPIO_Init>
  MX_SPI2_Init();
 80009b4:	f000 f85c 	bl	8000a70 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80009b8:	f000 f938 	bl	8000c2c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  LCD_Init();
 80009bc:	f7ff ff58 	bl	8000870 <LCD_Init>
  LCD_Puts_High(0,0,"LCD_Puts_High");
 80009c0:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <main+0x34>)
 80009c2:	2100      	movs	r1, #0
 80009c4:	2000      	movs	r0, #0
 80009c6:	f7ff fc69 	bl	800029c <LCD_Puts_High>
  LCD_Puts_Low(5,0,"LCD_Puts_Low");
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <main+0x38>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	2005      	movs	r0, #5
 80009d0:	f7ff fe2e 	bl	8000630 <LCD_Puts_Low>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <main+0x30>
 80009d6:	bf00      	nop
 80009d8:	08001ec4 	.word	0x08001ec4
 80009dc:	08001ed4 	.word	0x08001ed4

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b090      	sub	sp, #64	; 0x40
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0318 	add.w	r3, r7, #24
 80009ea:	2228      	movs	r2, #40	; 0x28
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fa54 	bl	8001e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
 80009fa:	605a      	str	r2, [r3, #4]
 80009fc:	609a      	str	r2, [r3, #8]
 80009fe:	60da      	str	r2, [r3, #12]
 8000a00:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a02:	2301      	movs	r3, #1
 8000a04:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a0a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a10:	2301      	movs	r3, #1
 8000a12:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a14:	2302      	movs	r3, #2
 8000a16:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a22:	f107 0318 	add.w	r3, r7, #24
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fca2 	bl	8001370 <HAL_RCC_OscConfig>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000a32:	f000 f818 	bl	8000a66 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a36:	230f      	movs	r3, #15
 8000a38:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a3a:	2302      	movs	r3, #2
 8000a3c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 ff10 	bl	8001874 <HAL_RCC_ClockConfig>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000a5a:	f000 f804 	bl	8000a66 <Error_Handler>
  }
}
 8000a5e:	bf00      	nop
 8000a60:	3740      	adds	r7, #64	; 0x40
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6a:	b672      	cpsid	i
}
 8000a6c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <Error_Handler+0x8>

08000a70 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a76:	4a18      	ldr	r2, [pc, #96]	; (8000ad8 <MX_SPI2_Init+0x68>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a80:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a82:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000a9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000aa8:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab4:	4b07      	ldr	r3, [pc, #28]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000abc:	220a      	movs	r2, #10
 8000abe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ac0:	4804      	ldr	r0, [pc, #16]	; (8000ad4 <MX_SPI2_Init+0x64>)
 8000ac2:	f001 f865 	bl	8001b90 <HAL_SPI_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000acc:	f7ff ffcb 	bl	8000a66 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000038 	.word	0x20000038
 8000ad8:	40003800 	.word	0x40003800

08000adc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b088      	sub	sp, #32
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI2)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	4a1c      	ldr	r2, [pc, #112]	; (8000b68 <HAL_SPI_MspInit+0x8c>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	d131      	bne.n	8000b60 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000afc:	4b1b      	ldr	r3, [pc, #108]	; (8000b6c <HAL_SPI_MspInit+0x90>)
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	4a1a      	ldr	r2, [pc, #104]	; (8000b6c <HAL_SPI_MspInit+0x90>)
 8000b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b06:	61d3      	str	r3, [r2, #28]
 8000b08:	4b18      	ldr	r3, [pc, #96]	; (8000b6c <HAL_SPI_MspInit+0x90>)
 8000b0a:	69db      	ldr	r3, [r3, #28]
 8000b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b14:	4b15      	ldr	r3, [pc, #84]	; (8000b6c <HAL_SPI_MspInit+0x90>)
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	4a14      	ldr	r2, [pc, #80]	; (8000b6c <HAL_SPI_MspInit+0x90>)
 8000b1a:	f043 0308 	orr.w	r3, r3, #8
 8000b1e:	6193      	str	r3, [r2, #24]
 8000b20:	4b12      	ldr	r3, [pc, #72]	; (8000b6c <HAL_SPI_MspInit+0x90>)
 8000b22:	699b      	ldr	r3, [r3, #24]
 8000b24:	f003 0308 	and.w	r3, r3, #8
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000b2c:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000b30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b32:	2302      	movs	r3, #2
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b36:	2303      	movs	r3, #3
 8000b38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b3a:	f107 0310 	add.w	r3, r7, #16
 8000b3e:	4619      	mov	r1, r3
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <HAL_SPI_MspInit+0x94>)
 8000b42:	f000 fa79 	bl	8001038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000b46:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b54:	f107 0310 	add.w	r3, r7, #16
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4805      	ldr	r0, [pc, #20]	; (8000b70 <HAL_SPI_MspInit+0x94>)
 8000b5c:	f000 fa6c 	bl	8001038 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b60:	bf00      	nop
 8000b62:	3720      	adds	r7, #32
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	40003800 	.word	0x40003800
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	40010c00 	.word	0x40010c00

08000b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b7a:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <HAL_MspInit+0x54>)
 8000b7c:	699b      	ldr	r3, [r3, #24]
 8000b7e:	4a12      	ldr	r2, [pc, #72]	; (8000bc8 <HAL_MspInit+0x54>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6193      	str	r3, [r2, #24]
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <HAL_MspInit+0x54>)
 8000b88:	699b      	ldr	r3, [r3, #24]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b92:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <HAL_MspInit+0x54>)
 8000b94:	69db      	ldr	r3, [r3, #28]
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <HAL_MspInit+0x54>)
 8000b98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9c:	61d3      	str	r3, [r2, #28]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <HAL_MspInit+0x54>)
 8000ba0:	69db      	ldr	r3, [r3, #28]
 8000ba2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** ENABLE: Full SWJ (JTAG-DP + SW-DP): Reset State
  */
  __HAL_AFIO_REMAP_SWJ_ENABLE();
 8000baa:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_MspInit+0x58>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	60fb      	str	r3, [r7, #12]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_MspInit+0x58>)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bc80      	pop	{r7}
 8000bc6:	4770      	bx	lr
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	40010000 	.word	0x40010000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <NMI_Handler+0x4>

08000bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bda:	e7fe      	b.n	8000bda <HardFault_Handler+0x4>

08000bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <MemManage_Handler+0x4>

08000be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <UsageFault_Handler+0x4>

08000bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bc80      	pop	{r7}
 8000bf8:	4770      	bx	lr

08000bfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bc80      	pop	{r7}
 8000c04:	4770      	bx	lr

08000c06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr

08000c12 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c16:	f000 f8eb 	bl	8000df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bc80      	pop	{r7}
 8000c28:	4770      	bx	lr
	...

08000c2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <MX_USART1_UART_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USART1_UART_Init+0x4c>)
 8000c64:	f001 f818 	bl	8001c98 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c6e:	f7ff fefa 	bl	8000a66 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000090 	.word	0x20000090
 8000c7c:	40013800 	.word	0x40013800

08000c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1c      	ldr	r2, [pc, #112]	; (8000d0c <HAL_UART_MspInit+0x8c>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d131      	bne.n	8000d04 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca0:	4b1b      	ldr	r3, [pc, #108]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	4a1a      	ldr	r2, [pc, #104]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000ca6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000caa:	6193      	str	r3, [r2, #24]
 8000cac:	4b18      	ldr	r3, [pc, #96]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000cae:	699b      	ldr	r3, [r3, #24]
 8000cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cb4:	60fb      	str	r3, [r7, #12]
 8000cb6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b15      	ldr	r3, [pc, #84]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	4a14      	ldr	r2, [pc, #80]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000cbe:	f043 0304 	orr.w	r3, r3, #4
 8000cc2:	6193      	str	r3, [r2, #24]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	; (8000d10 <HAL_UART_MspInit+0x90>)
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	f003 0304 	and.w	r3, r3, #4
 8000ccc:	60bb      	str	r3, [r7, #8]
 8000cce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cde:	f107 0310 	add.w	r3, r7, #16
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	480b      	ldr	r0, [pc, #44]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000ce6:	f000 f9a7 	bl	8001038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf8:	f107 0310 	add.w	r3, r7, #16
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <HAL_UART_MspInit+0x94>)
 8000d00:	f000 f99a 	bl	8001038 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d04:	bf00      	nop
 8000d06:	3720      	adds	r7, #32
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40013800 	.word	0x40013800
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40010800 	.word	0x40010800

08000d18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d18:	f7ff ff81 	bl	8000c1e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d1e:	490c      	ldr	r1, [pc, #48]	; (8000d50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d20:	4a0c      	ldr	r2, [pc, #48]	; (8000d54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d24:	e002      	b.n	8000d2c <LoopCopyDataInit>

08000d26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2a:	3304      	adds	r3, #4

08000d2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d30:	d3f9      	bcc.n	8000d26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d32:	4a09      	ldr	r2, [pc, #36]	; (8000d58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d34:	4c09      	ldr	r4, [pc, #36]	; (8000d5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d38:	e001      	b.n	8000d3e <LoopFillZerobss>

08000d3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d3c:	3204      	adds	r2, #4

08000d3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d40:	d3fb      	bcc.n	8000d3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d42:	f001 f887 	bl	8001e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d46:	f7ff fe2d 	bl	80009a4 <main>
  bx lr
 8000d4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000d4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d50:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d54:	08001f18 	.word	0x08001f18
  ldr r2, =_sbss
 8000d58:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d5c:	200000dc 	.word	0x200000dc

08000d60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d60:	e7fe      	b.n	8000d60 <ADC1_2_IRQHandler>
	...

08000d64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_Init+0x28>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a07      	ldr	r2, [pc, #28]	; (8000d8c <HAL_Init+0x28>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d74:	2003      	movs	r0, #3
 8000d76:	f000 f92b 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d7a:	200f      	movs	r0, #15
 8000d7c:	f000 f808 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d80:	f7ff fef8 	bl	8000b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40022000 	.word	0x40022000

08000d90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <HAL_InitTick+0x54>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b12      	ldr	r3, [pc, #72]	; (8000de8 <HAL_InitTick+0x58>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	4619      	mov	r1, r3
 8000da2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dae:	4618      	mov	r0, r3
 8000db0:	f000 f935 	bl	800101e <HAL_SYSTICK_Config>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e00e      	b.n	8000ddc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2b0f      	cmp	r3, #15
 8000dc2:	d80a      	bhi.n	8000dda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dcc:	f000 f90b 	bl	8000fe6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dd0:	4a06      	ldr	r2, [pc, #24]	; (8000dec <HAL_InitTick+0x5c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e000      	b.n	8000ddc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000dda:	2301      	movs	r3, #1
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000004 	.word	0x20000004

08000df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x1c>)
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	461a      	mov	r2, r3
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <HAL_IncTick+0x20>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	4413      	add	r3, r2
 8000e00:	4a03      	ldr	r2, [pc, #12]	; (8000e10 <HAL_IncTick+0x20>)
 8000e02:	6013      	str	r3, [r2, #0]
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bc80      	pop	{r7}
 8000e0a:	4770      	bx	lr
 8000e0c:	20000008 	.word	0x20000008
 8000e10:	200000d8 	.word	0x200000d8

08000e14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return uwTick;
 8000e18:	4b02      	ldr	r3, [pc, #8]	; (8000e24 <HAL_GetTick+0x10>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr
 8000e24:	200000d8 	.word	0x200000d8

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff fff0 	bl	8000e14 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d005      	beq.n	8000e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <HAL_Delay+0x44>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	461a      	mov	r2, r3
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4413      	add	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4e:	bf00      	nop
 8000e50:	f7ff ffe0 	bl	8000e14 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68bb      	ldr	r3, [r7, #8]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	429a      	cmp	r2, r3
 8000e5e:	d8f7      	bhi.n	8000e50 <HAL_Delay+0x28>
  {
  }
}
 8000e60:	bf00      	nop
 8000e62:	bf00      	nop
 8000e64:	3710      	adds	r7, #16
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	20000008 	.word	0x20000008

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bc80      	pop	{r7}
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	; (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	; (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	79fb      	ldrb	r3, [r7, #7]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	; 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	; 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bc80      	pop	{r7}
 8000f8a:	4770      	bx	lr

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff90 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff49 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff5e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff90 	bl	8000f28 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5f 	bl	8000ed4 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffb0 	bl	8000f8c <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b08b      	sub	sp, #44	; 0x2c
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001046:	2300      	movs	r3, #0
 8001048:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104a:	e169      	b.n	8001320 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800104c:	2201      	movs	r2, #1
 800104e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	69fa      	ldr	r2, [r7, #28]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	429a      	cmp	r2, r3
 8001066:	f040 8158 	bne.w	800131a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	4a9a      	ldr	r2, [pc, #616]	; (80012d8 <HAL_GPIO_Init+0x2a0>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d05e      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 8001074:	4a98      	ldr	r2, [pc, #608]	; (80012d8 <HAL_GPIO_Init+0x2a0>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d875      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 800107a:	4a98      	ldr	r2, [pc, #608]	; (80012dc <HAL_GPIO_Init+0x2a4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d058      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 8001080:	4a96      	ldr	r2, [pc, #600]	; (80012dc <HAL_GPIO_Init+0x2a4>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d86f      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 8001086:	4a96      	ldr	r2, [pc, #600]	; (80012e0 <HAL_GPIO_Init+0x2a8>)
 8001088:	4293      	cmp	r3, r2
 800108a:	d052      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 800108c:	4a94      	ldr	r2, [pc, #592]	; (80012e0 <HAL_GPIO_Init+0x2a8>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d869      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 8001092:	4a94      	ldr	r2, [pc, #592]	; (80012e4 <HAL_GPIO_Init+0x2ac>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d04c      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 8001098:	4a92      	ldr	r2, [pc, #584]	; (80012e4 <HAL_GPIO_Init+0x2ac>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d863      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 800109e:	4a92      	ldr	r2, [pc, #584]	; (80012e8 <HAL_GPIO_Init+0x2b0>)
 80010a0:	4293      	cmp	r3, r2
 80010a2:	d046      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
 80010a4:	4a90      	ldr	r2, [pc, #576]	; (80012e8 <HAL_GPIO_Init+0x2b0>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d85d      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 80010aa:	2b12      	cmp	r3, #18
 80010ac:	d82a      	bhi.n	8001104 <HAL_GPIO_Init+0xcc>
 80010ae:	2b12      	cmp	r3, #18
 80010b0:	d859      	bhi.n	8001166 <HAL_GPIO_Init+0x12e>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <HAL_GPIO_Init+0x80>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	08001133 	.word	0x08001133
 80010bc:	0800110d 	.word	0x0800110d
 80010c0:	0800111f 	.word	0x0800111f
 80010c4:	08001161 	.word	0x08001161
 80010c8:	08001167 	.word	0x08001167
 80010cc:	08001167 	.word	0x08001167
 80010d0:	08001167 	.word	0x08001167
 80010d4:	08001167 	.word	0x08001167
 80010d8:	08001167 	.word	0x08001167
 80010dc:	08001167 	.word	0x08001167
 80010e0:	08001167 	.word	0x08001167
 80010e4:	08001167 	.word	0x08001167
 80010e8:	08001167 	.word	0x08001167
 80010ec:	08001167 	.word	0x08001167
 80010f0:	08001167 	.word	0x08001167
 80010f4:	08001167 	.word	0x08001167
 80010f8:	08001167 	.word	0x08001167
 80010fc:	08001115 	.word	0x08001115
 8001100:	08001129 	.word	0x08001129
 8001104:	4a79      	ldr	r2, [pc, #484]	; (80012ec <HAL_GPIO_Init+0x2b4>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800110a:	e02c      	b.n	8001166 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	623b      	str	r3, [r7, #32]
          break;
 8001112:	e029      	b.n	8001168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	3304      	adds	r3, #4
 800111a:	623b      	str	r3, [r7, #32]
          break;
 800111c:	e024      	b.n	8001168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	3308      	adds	r3, #8
 8001124:	623b      	str	r3, [r7, #32]
          break;
 8001126:	e01f      	b.n	8001168 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	330c      	adds	r3, #12
 800112e:	623b      	str	r3, [r7, #32]
          break;
 8001130:	e01a      	b.n	8001168 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800113a:	2304      	movs	r3, #4
 800113c:	623b      	str	r3, [r7, #32]
          break;
 800113e:	e013      	b.n	8001168 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b01      	cmp	r3, #1
 8001146:	d105      	bne.n	8001154 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001148:	2308      	movs	r3, #8
 800114a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	611a      	str	r2, [r3, #16]
          break;
 8001152:	e009      	b.n	8001168 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001154:	2308      	movs	r3, #8
 8001156:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	615a      	str	r2, [r3, #20]
          break;
 800115e:	e003      	b.n	8001168 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001160:	2300      	movs	r3, #0
 8001162:	623b      	str	r3, [r7, #32]
          break;
 8001164:	e000      	b.n	8001168 <HAL_GPIO_Init+0x130>
          break;
 8001166:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2bff      	cmp	r3, #255	; 0xff
 800116c:	d801      	bhi.n	8001172 <HAL_GPIO_Init+0x13a>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	e001      	b.n	8001176 <HAL_GPIO_Init+0x13e>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3304      	adds	r3, #4
 8001176:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	2bff      	cmp	r3, #255	; 0xff
 800117c:	d802      	bhi.n	8001184 <HAL_GPIO_Init+0x14c>
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	e002      	b.n	800118a <HAL_GPIO_Init+0x152>
 8001184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001186:	3b08      	subs	r3, #8
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	210f      	movs	r1, #15
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	401a      	ands	r2, r3
 800119c:	6a39      	ldr	r1, [r7, #32]
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	fa01 f303 	lsl.w	r3, r1, r3
 80011a4:	431a      	orrs	r2, r3
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 80b1 	beq.w	800131a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b8:	4b4d      	ldr	r3, [pc, #308]	; (80012f0 <HAL_GPIO_Init+0x2b8>)
 80011ba:	699b      	ldr	r3, [r3, #24]
 80011bc:	4a4c      	ldr	r2, [pc, #304]	; (80012f0 <HAL_GPIO_Init+0x2b8>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	6193      	str	r3, [r2, #24]
 80011c4:	4b4a      	ldr	r3, [pc, #296]	; (80012f0 <HAL_GPIO_Init+0x2b8>)
 80011c6:	699b      	ldr	r3, [r3, #24]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011d0:	4a48      	ldr	r2, [pc, #288]	; (80012f4 <HAL_GPIO_Init+0x2bc>)
 80011d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	f003 0303 	and.w	r3, r3, #3
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	220f      	movs	r2, #15
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	4013      	ands	r3, r2
 80011f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a40      	ldr	r2, [pc, #256]	; (80012f8 <HAL_GPIO_Init+0x2c0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d013      	beq.n	8001224 <HAL_GPIO_Init+0x1ec>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a3f      	ldr	r2, [pc, #252]	; (80012fc <HAL_GPIO_Init+0x2c4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d00d      	beq.n	8001220 <HAL_GPIO_Init+0x1e8>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a3e      	ldr	r2, [pc, #248]	; (8001300 <HAL_GPIO_Init+0x2c8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d007      	beq.n	800121c <HAL_GPIO_Init+0x1e4>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a3d      	ldr	r2, [pc, #244]	; (8001304 <HAL_GPIO_Init+0x2cc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d101      	bne.n	8001218 <HAL_GPIO_Init+0x1e0>
 8001214:	2303      	movs	r3, #3
 8001216:	e006      	b.n	8001226 <HAL_GPIO_Init+0x1ee>
 8001218:	2304      	movs	r3, #4
 800121a:	e004      	b.n	8001226 <HAL_GPIO_Init+0x1ee>
 800121c:	2302      	movs	r3, #2
 800121e:	e002      	b.n	8001226 <HAL_GPIO_Init+0x1ee>
 8001220:	2301      	movs	r3, #1
 8001222:	e000      	b.n	8001226 <HAL_GPIO_Init+0x1ee>
 8001224:	2300      	movs	r3, #0
 8001226:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001228:	f002 0203 	and.w	r2, r2, #3
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	4093      	lsls	r3, r2
 8001230:	68fa      	ldr	r2, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001236:	492f      	ldr	r1, [pc, #188]	; (80012f4 <HAL_GPIO_Init+0x2bc>)
 8001238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800123a:	089b      	lsrs	r3, r3, #2
 800123c:	3302      	adds	r3, #2
 800123e:	68fa      	ldr	r2, [r7, #12]
 8001240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d006      	beq.n	800125e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 8001252:	689a      	ldr	r2, [r3, #8]
 8001254:	492c      	ldr	r1, [pc, #176]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	608b      	str	r3, [r1, #8]
 800125c:	e006      	b.n	800126c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800125e:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	43db      	mvns	r3, r3
 8001266:	4928      	ldr	r1, [pc, #160]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 8001268:	4013      	ands	r3, r2
 800126a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001278:	4b23      	ldr	r3, [pc, #140]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 800127a:	68da      	ldr	r2, [r3, #12]
 800127c:	4922      	ldr	r1, [pc, #136]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	60cb      	str	r3, [r1, #12]
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001286:	4b20      	ldr	r3, [pc, #128]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 8001288:	68da      	ldr	r2, [r3, #12]
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	43db      	mvns	r3, r3
 800128e:	491e      	ldr	r1, [pc, #120]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 8001290:	4013      	ands	r3, r2
 8001292:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012a0:	4b19      	ldr	r3, [pc, #100]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4918      	ldr	r1, [pc, #96]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	4914      	ldr	r1, [pc, #80]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d021      	beq.n	800130c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	490e      	ldr	r1, [pc, #56]	; (8001308 <HAL_GPIO_Init+0x2d0>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	600b      	str	r3, [r1, #0]
 80012d4:	e021      	b.n	800131a <HAL_GPIO_Init+0x2e2>
 80012d6:	bf00      	nop
 80012d8:	10320000 	.word	0x10320000
 80012dc:	10310000 	.word	0x10310000
 80012e0:	10220000 	.word	0x10220000
 80012e4:	10210000 	.word	0x10210000
 80012e8:	10120000 	.word	0x10120000
 80012ec:	10110000 	.word	0x10110000
 80012f0:	40021000 	.word	0x40021000
 80012f4:	40010000 	.word	0x40010000
 80012f8:	40010800 	.word	0x40010800
 80012fc:	40010c00 	.word	0x40010c00
 8001300:	40011000 	.word	0x40011000
 8001304:	40011400 	.word	0x40011400
 8001308:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_GPIO_Init+0x304>)
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	43db      	mvns	r3, r3
 8001314:	4909      	ldr	r1, [pc, #36]	; (800133c <HAL_GPIO_Init+0x304>)
 8001316:	4013      	ands	r3, r2
 8001318:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800131a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131c:	3301      	adds	r3, #1
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	fa22 f303 	lsr.w	r3, r2, r3
 800132a:	2b00      	cmp	r3, #0
 800132c:	f47f ae8e 	bne.w	800104c <HAL_GPIO_Init+0x14>
  }
}
 8001330:	bf00      	nop
 8001332:	bf00      	nop
 8001334:	372c      	adds	r7, #44	; 0x2c
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	40010400 	.word	0x40010400

08001340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	460b      	mov	r3, r1
 800134a:	807b      	strh	r3, [r7, #2]
 800134c:	4613      	mov	r3, r2
 800134e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001350:	787b      	ldrb	r3, [r7, #1]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d003      	beq.n	800135e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800135c:	e003      	b.n	8001366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800135e:	887b      	ldrh	r3, [r7, #2]
 8001360:	041a      	lsls	r2, r3, #16
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	611a      	str	r2, [r3, #16]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr

08001370 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e272      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8087 	beq.w	800149e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001390:	4b92      	ldr	r3, [pc, #584]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b04      	cmp	r3, #4
 800139a:	d00c      	beq.n	80013b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800139c:	4b8f      	ldr	r3, [pc, #572]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 030c 	and.w	r3, r3, #12
 80013a4:	2b08      	cmp	r3, #8
 80013a6:	d112      	bne.n	80013ce <HAL_RCC_OscConfig+0x5e>
 80013a8:	4b8c      	ldr	r3, [pc, #560]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013b4:	d10b      	bne.n	80013ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b6:	4b89      	ldr	r3, [pc, #548]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d06c      	beq.n	800149c <HAL_RCC_OscConfig+0x12c>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d168      	bne.n	800149c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e24c      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013d6:	d106      	bne.n	80013e6 <HAL_RCC_OscConfig+0x76>
 80013d8:	4b80      	ldr	r3, [pc, #512]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a7f      	ldr	r2, [pc, #508]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013e2:	6013      	str	r3, [r2, #0]
 80013e4:	e02e      	b.n	8001444 <HAL_RCC_OscConfig+0xd4>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d10c      	bne.n	8001408 <HAL_RCC_OscConfig+0x98>
 80013ee:	4b7b      	ldr	r3, [pc, #492]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4a7a      	ldr	r2, [pc, #488]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013f8:	6013      	str	r3, [r2, #0]
 80013fa:	4b78      	ldr	r3, [pc, #480]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a77      	ldr	r2, [pc, #476]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001400:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001404:	6013      	str	r3, [r2, #0]
 8001406:	e01d      	b.n	8001444 <HAL_RCC_OscConfig+0xd4>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0xbc>
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a71      	ldr	r2, [pc, #452]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001418:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800141c:	6013      	str	r3, [r2, #0]
 800141e:	4b6f      	ldr	r3, [pc, #444]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a6e      	ldr	r2, [pc, #440]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001424:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0xd4>
 800142c:	4b6b      	ldr	r3, [pc, #428]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a6a      	ldr	r2, [pc, #424]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001432:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001436:	6013      	str	r3, [r2, #0]
 8001438:	4b68      	ldr	r3, [pc, #416]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a67      	ldr	r2, [pc, #412]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 800143e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001442:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d013      	beq.n	8001474 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800144c:	f7ff fce2 	bl	8000e14 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001452:	e008      	b.n	8001466 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001454:	f7ff fcde 	bl	8000e14 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	2b64      	cmp	r3, #100	; 0x64
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e200      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001466:	4b5d      	ldr	r3, [pc, #372]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d0f0      	beq.n	8001454 <HAL_RCC_OscConfig+0xe4>
 8001472:	e014      	b.n	800149e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fcce 	bl	8000e14 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800147c:	f7ff fcca 	bl	8000e14 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b64      	cmp	r3, #100	; 0x64
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e1ec      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800148e:	4b53      	ldr	r3, [pc, #332]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x10c>
 800149a:	e000      	b.n	800149e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800149c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d063      	beq.n	8001572 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014aa:	4b4c      	ldr	r3, [pc, #304]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 030c 	and.w	r3, r3, #12
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80014b6:	4b49      	ldr	r3, [pc, #292]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 030c 	and.w	r3, r3, #12
 80014be:	2b08      	cmp	r3, #8
 80014c0:	d11c      	bne.n	80014fc <HAL_RCC_OscConfig+0x18c>
 80014c2:	4b46      	ldr	r3, [pc, #280]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d116      	bne.n	80014fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ce:	4b43      	ldr	r3, [pc, #268]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d005      	beq.n	80014e6 <HAL_RCC_OscConfig+0x176>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	691b      	ldr	r3, [r3, #16]
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e1c0      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4b3d      	ldr	r3, [pc, #244]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	4939      	ldr	r1, [pc, #228]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014fa:	e03a      	b.n	8001572 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d020      	beq.n	8001546 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001504:	4b36      	ldr	r3, [pc, #216]	; (80015e0 <HAL_RCC_OscConfig+0x270>)
 8001506:	2201      	movs	r2, #1
 8001508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150a:	f7ff fc83 	bl	8000e14 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001512:	f7ff fc7f 	bl	8000e14 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e1a1      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001524:	4b2d      	ldr	r3, [pc, #180]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0302 	and.w	r3, r3, #2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d0f0      	beq.n	8001512 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001530:	4b2a      	ldr	r3, [pc, #168]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	00db      	lsls	r3, r3, #3
 800153e:	4927      	ldr	r1, [pc, #156]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
 8001544:	e015      	b.n	8001572 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_RCC_OscConfig+0x270>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fc62 	bl	8000e14 <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001554:	f7ff fc5e 	bl	8000e14 <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b02      	cmp	r3, #2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e180      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001566:	4b1d      	ldr	r3, [pc, #116]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f0      	bne.n	8001554 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0308 	and.w	r3, r3, #8
 800157a:	2b00      	cmp	r3, #0
 800157c:	d03a      	beq.n	80015f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	699b      	ldr	r3, [r3, #24]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d019      	beq.n	80015ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001586:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_RCC_OscConfig+0x274>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800158c:	f7ff fc42 	bl	8000e14 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001594:	f7ff fc3e 	bl	8000e14 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e160      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <HAL_RCC_OscConfig+0x26c>)
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	f003 0302 	and.w	r3, r3, #2
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 face 	bl	8001b54 <RCC_Delay>
 80015b8:	e01c      	b.n	80015f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_RCC_OscConfig+0x274>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015c0:	f7ff fc28 	bl	8000e14 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015c6:	e00f      	b.n	80015e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015c8:	f7ff fc24 	bl	8000e14 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d908      	bls.n	80015e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e146      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
 80015da:	bf00      	nop
 80015dc:	40021000 	.word	0x40021000
 80015e0:	42420000 	.word	0x42420000
 80015e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015e8:	4b92      	ldr	r3, [pc, #584]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1e9      	bne.n	80015c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0304 	and.w	r3, r3, #4
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	f000 80a6 	beq.w	800174e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001602:	2300      	movs	r3, #0
 8001604:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001606:	4b8b      	ldr	r3, [pc, #556]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	69db      	ldr	r3, [r3, #28]
 800160a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10d      	bne.n	800162e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	4b88      	ldr	r3, [pc, #544]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	4a87      	ldr	r2, [pc, #540]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800161c:	61d3      	str	r3, [r2, #28]
 800161e:	4b85      	ldr	r3, [pc, #532]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	69db      	ldr	r3, [r3, #28]
 8001622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001626:	60bb      	str	r3, [r7, #8]
 8001628:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800162a:	2301      	movs	r3, #1
 800162c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800162e:	4b82      	ldr	r3, [pc, #520]	; (8001838 <HAL_RCC_OscConfig+0x4c8>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001636:	2b00      	cmp	r3, #0
 8001638:	d118      	bne.n	800166c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800163a:	4b7f      	ldr	r3, [pc, #508]	; (8001838 <HAL_RCC_OscConfig+0x4c8>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a7e      	ldr	r2, [pc, #504]	; (8001838 <HAL_RCC_OscConfig+0x4c8>)
 8001640:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001644:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001646:	f7ff fbe5 	bl	8000e14 <HAL_GetTick>
 800164a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164c:	e008      	b.n	8001660 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800164e:	f7ff fbe1 	bl	8000e14 <HAL_GetTick>
 8001652:	4602      	mov	r2, r0
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	2b64      	cmp	r3, #100	; 0x64
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e103      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001660:	4b75      	ldr	r3, [pc, #468]	; (8001838 <HAL_RCC_OscConfig+0x4c8>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0f0      	beq.n	800164e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d106      	bne.n	8001682 <HAL_RCC_OscConfig+0x312>
 8001674:	4b6f      	ldr	r3, [pc, #444]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4a6e      	ldr	r2, [pc, #440]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	6213      	str	r3, [r2, #32]
 8001680:	e02d      	b.n	80016de <HAL_RCC_OscConfig+0x36e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10c      	bne.n	80016a4 <HAL_RCC_OscConfig+0x334>
 800168a:	4b6a      	ldr	r3, [pc, #424]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	4a69      	ldr	r2, [pc, #420]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001690:	f023 0301 	bic.w	r3, r3, #1
 8001694:	6213      	str	r3, [r2, #32]
 8001696:	4b67      	ldr	r3, [pc, #412]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	4a66      	ldr	r2, [pc, #408]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800169c:	f023 0304 	bic.w	r3, r3, #4
 80016a0:	6213      	str	r3, [r2, #32]
 80016a2:	e01c      	b.n	80016de <HAL_RCC_OscConfig+0x36e>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b05      	cmp	r3, #5
 80016aa:	d10c      	bne.n	80016c6 <HAL_RCC_OscConfig+0x356>
 80016ac:	4b61      	ldr	r3, [pc, #388]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016ae:	6a1b      	ldr	r3, [r3, #32]
 80016b0:	4a60      	ldr	r2, [pc, #384]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016b2:	f043 0304 	orr.w	r3, r3, #4
 80016b6:	6213      	str	r3, [r2, #32]
 80016b8:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	4a5d      	ldr	r2, [pc, #372]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	f043 0301 	orr.w	r3, r3, #1
 80016c2:	6213      	str	r3, [r2, #32]
 80016c4:	e00b      	b.n	80016de <HAL_RCC_OscConfig+0x36e>
 80016c6:	4b5b      	ldr	r3, [pc, #364]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a5a      	ldr	r2, [pc, #360]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	4b58      	ldr	r3, [pc, #352]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a57      	ldr	r2, [pc, #348]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d015      	beq.n	8001712 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fb95 	bl	8000e14 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ec:	e00a      	b.n	8001704 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ee:	f7ff fb91 	bl	8000e14 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d901      	bls.n	8001704 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001700:	2303      	movs	r3, #3
 8001702:	e0b1      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001704:	4b4b      	ldr	r3, [pc, #300]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d0ee      	beq.n	80016ee <HAL_RCC_OscConfig+0x37e>
 8001710:	e014      	b.n	800173c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001712:	f7ff fb7f 	bl	8000e14 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001718:	e00a      	b.n	8001730 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171a:	f7ff fb7b 	bl	8000e14 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	f241 3288 	movw	r2, #5000	; 0x1388
 8001728:	4293      	cmp	r3, r2
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e09b      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001730:	4b40      	ldr	r3, [pc, #256]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	f003 0302 	and.w	r3, r3, #2
 8001738:	2b00      	cmp	r3, #0
 800173a:	d1ee      	bne.n	800171a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800173c:	7dfb      	ldrb	r3, [r7, #23]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d105      	bne.n	800174e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001742:	4b3c      	ldr	r3, [pc, #240]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	4a3b      	ldr	r2, [pc, #236]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 8001748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800174c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	2b00      	cmp	r3, #0
 8001754:	f000 8087 	beq.w	8001866 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001758:	4b36      	ldr	r3, [pc, #216]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d061      	beq.n	8001828 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	2b02      	cmp	r3, #2
 800176a:	d146      	bne.n	80017fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800176c:	4b33      	ldr	r3, [pc, #204]	; (800183c <HAL_RCC_OscConfig+0x4cc>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001772:	f7ff fb4f 	bl	8000e14 <HAL_GetTick>
 8001776:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001778:	e008      	b.n	800178c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800177a:	f7ff fb4b 	bl	8000e14 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	2b02      	cmp	r3, #2
 8001786:	d901      	bls.n	800178c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001788:	2303      	movs	r3, #3
 800178a:	e06d      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178c:	4b29      	ldr	r3, [pc, #164]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d1f0      	bne.n	800177a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017a0:	d108      	bne.n	80017b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017a2:	4b24      	ldr	r3, [pc, #144]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	4921      	ldr	r1, [pc, #132]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a19      	ldr	r1, [r3, #32]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	430b      	orrs	r3, r1
 80017c6:	491b      	ldr	r1, [pc, #108]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017cc:	4b1b      	ldr	r3, [pc, #108]	; (800183c <HAL_RCC_OscConfig+0x4cc>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d2:	f7ff fb1f 	bl	8000e14 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017da:	f7ff fb1b 	bl	8000e14 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e03d      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017ec:	4b11      	ldr	r3, [pc, #68]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x46a>
 80017f8:	e035      	b.n	8001866 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <HAL_RCC_OscConfig+0x4cc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001800:	f7ff fb08 	bl	8000e14 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001808:	f7ff fb04 	bl	8000e14 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e026      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_RCC_OscConfig+0x4c4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d1f0      	bne.n	8001808 <HAL_RCC_OscConfig+0x498>
 8001826:	e01e      	b.n	8001866 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	69db      	ldr	r3, [r3, #28]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e019      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
 8001834:	40021000 	.word	0x40021000
 8001838:	40007000 	.word	0x40007000
 800183c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <HAL_RCC_OscConfig+0x500>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a1b      	ldr	r3, [r3, #32]
 8001850:	429a      	cmp	r2, r3
 8001852:	d106      	bne.n	8001862 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800185e:	429a      	cmp	r2, r3
 8001860:	d001      	beq.n	8001866 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e000      	b.n	8001868 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001866:	2300      	movs	r3, #0
}
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40021000 	.word	0x40021000

08001874 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e0d0      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001888:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	683a      	ldr	r2, [r7, #0]
 8001892:	429a      	cmp	r2, r3
 8001894:	d910      	bls.n	80018b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001896:	4b67      	ldr	r3, [pc, #412]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f023 0207 	bic.w	r2, r3, #7
 800189e:	4965      	ldr	r1, [pc, #404]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a6:	4b63      	ldr	r3, [pc, #396]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	683a      	ldr	r2, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d001      	beq.n	80018b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80018b4:	2301      	movs	r3, #1
 80018b6:	e0b8      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d020      	beq.n	8001906 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0304 	and.w	r3, r3, #4
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d005      	beq.n	80018dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80018d0:	4b59      	ldr	r3, [pc, #356]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	4a58      	ldr	r2, [pc, #352]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80018da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0308 	and.w	r3, r3, #8
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018e8:	4b53      	ldr	r3, [pc, #332]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	4a52      	ldr	r2, [pc, #328]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80018f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018f4:	4b50      	ldr	r3, [pc, #320]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	494d      	ldr	r1, [pc, #308]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	2b00      	cmp	r3, #0
 8001910:	d040      	beq.n	8001994 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d107      	bne.n	800192a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800191a:	4b47      	ldr	r3, [pc, #284]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d115      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e07f      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	2b02      	cmp	r3, #2
 8001930:	d107      	bne.n	8001942 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d109      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e073      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001942:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 0302 	and.w	r3, r3, #2
 800194a:	2b00      	cmp	r3, #0
 800194c:	d101      	bne.n	8001952 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e06b      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001952:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f023 0203 	bic.w	r2, r3, #3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4936      	ldr	r1, [pc, #216]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001960:	4313      	orrs	r3, r2
 8001962:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001964:	f7ff fa56 	bl	8000e14 <HAL_GetTick>
 8001968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196a:	e00a      	b.n	8001982 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800196c:	f7ff fa52 	bl	8000e14 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	f241 3288 	movw	r2, #5000	; 0x1388
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e053      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001982:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f003 020c 	and.w	r2, r3, #12
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	429a      	cmp	r2, r3
 8001992:	d1eb      	bne.n	800196c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001994:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0307 	and.w	r3, r3, #7
 800199c:	683a      	ldr	r2, [r7, #0]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d210      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019a2:	4b24      	ldr	r3, [pc, #144]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 0207 	bic.w	r2, r3, #7
 80019aa:	4922      	ldr	r1, [pc, #136]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b2:	4b20      	ldr	r3, [pc, #128]	; (8001a34 <HAL_RCC_ClockConfig+0x1c0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e032      	b.n	8001a2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0304 	and.w	r3, r3, #4
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d008      	beq.n	80019e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019d0:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4916      	ldr	r1, [pc, #88]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80019de:	4313      	orrs	r3, r2
 80019e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0308 	and.w	r3, r3, #8
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d009      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019ee:	4b12      	ldr	r3, [pc, #72]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	691b      	ldr	r3, [r3, #16]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	490e      	ldr	r1, [pc, #56]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a02:	f000 f821 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 8001a06:	4602      	mov	r2, r0
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	091b      	lsrs	r3, r3, #4
 8001a0e:	f003 030f 	and.w	r3, r3, #15
 8001a12:	490a      	ldr	r1, [pc, #40]	; (8001a3c <HAL_RCC_ClockConfig+0x1c8>)
 8001a14:	5ccb      	ldrb	r3, [r1, r3]
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	4a09      	ldr	r2, [pc, #36]	; (8001a40 <HAL_RCC_ClockConfig+0x1cc>)
 8001a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_ClockConfig+0x1d0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff f9b4 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	40022000 	.word	0x40022000
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	08001ee4 	.word	0x08001ee4
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a62:	4b1e      	ldr	r3, [pc, #120]	; (8001adc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f003 030c 	and.w	r3, r3, #12
 8001a6e:	2b04      	cmp	r3, #4
 8001a70:	d002      	beq.n	8001a78 <HAL_RCC_GetSysClockFreq+0x30>
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d003      	beq.n	8001a7e <HAL_RCC_GetSysClockFreq+0x36>
 8001a76:	e027      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a78:	4b19      	ldr	r3, [pc, #100]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a7a:	613b      	str	r3, [r7, #16]
      break;
 8001a7c:	e027      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	0c9b      	lsrs	r3, r3, #18
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a88:	5cd3      	ldrb	r3, [r2, r3]
 8001a8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d010      	beq.n	8001ab8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_RCC_GetSysClockFreq+0x94>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	0c5b      	lsrs	r3, r3, #17
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	4a11      	ldr	r2, [pc, #68]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a0d      	ldr	r2, [pc, #52]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aaa:	fb03 f202 	mul.w	r2, r3, r2
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	e004      	b.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <HAL_RCC_GetSysClockFreq+0xa4>)
 8001abc:	fb02 f303 	mul.w	r3, r2, r3
 8001ac0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	613b      	str	r3, [r7, #16]
      break;
 8001ac6:	e002      	b.n	8001ace <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001aca:	613b      	str	r3, [r7, #16]
      break;
 8001acc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ace:	693b      	ldr	r3, [r7, #16]
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	371c      	adds	r7, #28
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	007a1200 	.word	0x007a1200
 8001ae4:	08001efc 	.word	0x08001efc
 8001ae8:	08001f0c 	.word	0x08001f0c
 8001aec:	003d0900 	.word	0x003d0900

08001af0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x10>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bc80      	pop	{r7}
 8001afe:	4770      	bx	lr
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff2 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	0a1b      	lsrs	r3, r3, #8
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40021000 	.word	0x40021000
 8001b28:	08001ef4 	.word	0x08001ef4

08001b2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b30:	f7ff ffde 	bl	8001af0 <HAL_RCC_GetHCLKFreq>
 8001b34:	4602      	mov	r2, r0
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	0adb      	lsrs	r3, r3, #11
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	4903      	ldr	r1, [pc, #12]	; (8001b50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b42:	5ccb      	ldrb	r3, [r1, r3]
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	08001ef4 	.word	0x08001ef4

08001b54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b5c:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <RCC_Delay+0x34>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0a      	ldr	r2, [pc, #40]	; (8001b8c <RCC_Delay+0x38>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0a5b      	lsrs	r3, r3, #9
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b70:	bf00      	nop
  }
  while (Delay --);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1e5a      	subs	r2, r3, #1
 8001b76:	60fa      	str	r2, [r7, #12]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f9      	bne.n	8001b70 <RCC_Delay+0x1c>
}
 8001b7c:	bf00      	nop
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	10624dd3 	.word	0x10624dd3

08001b90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e076      	b.n	8001c90 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d108      	bne.n	8001bbc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bb2:	d009      	beq.n	8001bc8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
 8001bba:	e005      	b.n	8001bc8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe ff7a 	bl	8000adc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bfe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c10:	431a      	orrs	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	691b      	ldr	r3, [r3, #16]
 8001c20:	f003 0302 	and.w	r3, r3, #2
 8001c24:	431a      	orrs	r2, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	431a      	orrs	r2, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c38:	431a      	orrs	r2, r3
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69db      	ldr	r3, [r3, #28]
 8001c3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a1b      	ldr	r3, [r3, #32]
 8001c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c4c:	ea42 0103 	orr.w	r1, r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c54:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	0c1a      	lsrs	r2, r3, #16
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f002 0204 	and.w	r2, r2, #4
 8001c6e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	69da      	ldr	r2, [r3, #28]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c7e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e042      	b.n	8001d30 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cb0:	b2db      	uxtb	r3, r3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d106      	bne.n	8001cc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe ffde 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2224      	movs	r2, #36	; 0x24
 8001cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f82b 	bl	8001d38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	691a      	ldr	r2, [r3, #16]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001cf0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	695a      	ldr	r2, [r3, #20]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001d00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2220      	movs	r2, #32
 8001d1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2220      	movs	r2, #32
 8001d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68da      	ldr	r2, [r3, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	430a      	orrs	r2, r1
 8001d54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	691b      	ldr	r3, [r3, #16]
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	695b      	ldr	r3, [r3, #20]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8001d72:	f023 030c 	bic.w	r3, r3, #12
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	68b9      	ldr	r1, [r7, #8]
 8001d7c:	430b      	orrs	r3, r1
 8001d7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	699a      	ldr	r2, [r3, #24]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a2c      	ldr	r2, [pc, #176]	; (8001e4c <UART_SetConfig+0x114>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d103      	bne.n	8001da8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001da0:	f7ff fec4 	bl	8001b2c <HAL_RCC_GetPCLK2Freq>
 8001da4:	60f8      	str	r0, [r7, #12]
 8001da6:	e002      	b.n	8001dae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001da8:	f7ff feac 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 8001dac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	009a      	lsls	r2, r3, #2
 8001db8:	441a      	add	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc4:	4a22      	ldr	r2, [pc, #136]	; (8001e50 <UART_SetConfig+0x118>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	0119      	lsls	r1, r3, #4
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009a      	lsls	r2, r3, #2
 8001dd8:	441a      	add	r2, r3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <UART_SetConfig+0x118>)
 8001de6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dea:	095b      	lsrs	r3, r3, #5
 8001dec:	2064      	movs	r0, #100	; 0x64
 8001dee:	fb00 f303 	mul.w	r3, r0, r3
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	3332      	adds	r3, #50	; 0x32
 8001df8:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <UART_SetConfig+0x118>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	095b      	lsrs	r3, r3, #5
 8001e00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e04:	4419      	add	r1, r3
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009a      	lsls	r2, r3, #2
 8001e10:	441a      	add	r2, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <UART_SetConfig+0x118>)
 8001e1e:	fba3 0302 	umull	r0, r3, r3, r2
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2064      	movs	r0, #100	; 0x64
 8001e26:	fb00 f303 	mul.w	r3, r0, r3
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	011b      	lsls	r3, r3, #4
 8001e2e:	3332      	adds	r3, #50	; 0x32
 8001e30:	4a07      	ldr	r2, [pc, #28]	; (8001e50 <UART_SetConfig+0x118>)
 8001e32:	fba2 2303 	umull	r2, r3, r2, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	f003 020f 	and.w	r2, r3, #15
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	440a      	add	r2, r1
 8001e42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	40013800 	.word	0x40013800
 8001e50:	51eb851f 	.word	0x51eb851f

08001e54 <__libc_init_array>:
 8001e54:	b570      	push	{r4, r5, r6, lr}
 8001e56:	2600      	movs	r6, #0
 8001e58:	4d0c      	ldr	r5, [pc, #48]	; (8001e8c <__libc_init_array+0x38>)
 8001e5a:	4c0d      	ldr	r4, [pc, #52]	; (8001e90 <__libc_init_array+0x3c>)
 8001e5c:	1b64      	subs	r4, r4, r5
 8001e5e:	10a4      	asrs	r4, r4, #2
 8001e60:	42a6      	cmp	r6, r4
 8001e62:	d109      	bne.n	8001e78 <__libc_init_array+0x24>
 8001e64:	f000 f822 	bl	8001eac <_init>
 8001e68:	2600      	movs	r6, #0
 8001e6a:	4d0a      	ldr	r5, [pc, #40]	; (8001e94 <__libc_init_array+0x40>)
 8001e6c:	4c0a      	ldr	r4, [pc, #40]	; (8001e98 <__libc_init_array+0x44>)
 8001e6e:	1b64      	subs	r4, r4, r5
 8001e70:	10a4      	asrs	r4, r4, #2
 8001e72:	42a6      	cmp	r6, r4
 8001e74:	d105      	bne.n	8001e82 <__libc_init_array+0x2e>
 8001e76:	bd70      	pop	{r4, r5, r6, pc}
 8001e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e7c:	4798      	blx	r3
 8001e7e:	3601      	adds	r6, #1
 8001e80:	e7ee      	b.n	8001e60 <__libc_init_array+0xc>
 8001e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e86:	4798      	blx	r3
 8001e88:	3601      	adds	r6, #1
 8001e8a:	e7f2      	b.n	8001e72 <__libc_init_array+0x1e>
 8001e8c:	08001f10 	.word	0x08001f10
 8001e90:	08001f10 	.word	0x08001f10
 8001e94:	08001f10 	.word	0x08001f10
 8001e98:	08001f14 	.word	0x08001f14

08001e9c <memset>:
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4402      	add	r2, r0
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d100      	bne.n	8001ea6 <memset+0xa>
 8001ea4:	4770      	bx	lr
 8001ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8001eaa:	e7f9      	b.n	8001ea0 <memset+0x4>

08001eac <_init>:
 8001eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eae:	bf00      	nop
 8001eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eb2:	bc08      	pop	{r3}
 8001eb4:	469e      	mov	lr, r3
 8001eb6:	4770      	bx	lr

08001eb8 <_fini>:
 8001eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eba:	bf00      	nop
 8001ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ebe:	bc08      	pop	{r3}
 8001ec0:	469e      	mov	lr, r3
 8001ec2:	4770      	bx	lr
